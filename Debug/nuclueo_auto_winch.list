
nuclueo_auto_winch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006148  08006148  00007148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e0  080061e0  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080061e0  080061e0  000071e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e8  080061e8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e8  080061e8  000071e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061ec  080061ec  000071ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080061f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000070  08006260  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08006260  000083d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013860  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c0  00000000  00000000  0001b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0001dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef2  00000000  00000000  0001f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f76  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fc0  00000000  00000000  00046028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcbf8  00000000  00000000  0005bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138be0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  00138c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0013e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006130 	.word	0x08006130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006130 	.word	0x08006130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b96a 	b.w	80008d4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	460c      	mov	r4, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d14e      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000624:	4694      	mov	ip, r2
 8000626:	458c      	cmp	ip, r1
 8000628:	4686      	mov	lr, r0
 800062a:	fab2 f282 	clz	r2, r2
 800062e:	d962      	bls.n	80006f6 <__udivmoddi4+0xde>
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	4091      	lsls	r1, r2
 8000638:	fa20 f303 	lsr.w	r3, r0, r3
 800063c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	fa00 fe02 	lsl.w	lr, r0, r2
 8000646:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800064a:	fa1f f68c 	uxth.w	r6, ip
 800064e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000652:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000656:	fb07 1114 	mls	r1, r7, r4, r1
 800065a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065e:	fb04 f106 	mul.w	r1, r4, r6
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f104 30ff 	add.w	r0, r4, #4294967295
 800066e:	f080 8112 	bcs.w	8000896 <__udivmoddi4+0x27e>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 810f 	bls.w	8000896 <__udivmoddi4+0x27e>
 8000678:	3c02      	subs	r4, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a59      	subs	r1, r3, r1
 800067e:	fa1f f38e 	uxth.w	r3, lr
 8000682:	fbb1 f0f7 	udiv	r0, r1, r7
 8000686:	fb07 1110 	mls	r1, r7, r0, r1
 800068a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068e:	fb00 f606 	mul.w	r6, r0, r6
 8000692:	429e      	cmp	r6, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x94>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 31ff 	add.w	r1, r0, #4294967295
 800069e:	f080 80fc 	bcs.w	800089a <__udivmoddi4+0x282>
 80006a2:	429e      	cmp	r6, r3
 80006a4:	f240 80f9 	bls.w	800089a <__udivmoddi4+0x282>
 80006a8:	4463      	add	r3, ip
 80006aa:	3802      	subs	r0, #2
 80006ac:	1b9b      	subs	r3, r3, r6
 80006ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	b11d      	cbz	r5, 80006be <__udivmoddi4+0xa6>
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	e9c5 3200 	strd	r3, r2, [r5]
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d905      	bls.n	80006d2 <__udivmoddi4+0xba>
 80006c6:	b10d      	cbz	r5, 80006cc <__udivmoddi4+0xb4>
 80006c8:	e9c5 0100 	strd	r0, r1, [r5]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4608      	mov	r0, r1
 80006d0:	e7f5      	b.n	80006be <__udivmoddi4+0xa6>
 80006d2:	fab3 f183 	clz	r1, r3
 80006d6:	2900      	cmp	r1, #0
 80006d8:	d146      	bne.n	8000768 <__udivmoddi4+0x150>
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xcc>
 80006de:	4290      	cmp	r0, r2
 80006e0:	f0c0 80f0 	bcc.w	80008c4 <__udivmoddi4+0x2ac>
 80006e4:	1a86      	subs	r6, r0, r2
 80006e6:	eb64 0303 	sbc.w	r3, r4, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d0e6      	beq.n	80006be <__udivmoddi4+0xa6>
 80006f0:	e9c5 6300 	strd	r6, r3, [r5]
 80006f4:	e7e3      	b.n	80006be <__udivmoddi4+0xa6>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	f040 8090 	bne.w	800081c <__udivmoddi4+0x204>
 80006fc:	eba1 040c 	sub.w	r4, r1, ip
 8000700:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000704:	fa1f f78c 	uxth.w	r7, ip
 8000708:	2101      	movs	r1, #1
 800070a:	fbb4 f6f8 	udiv	r6, r4, r8
 800070e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000712:	fb08 4416 	mls	r4, r8, r6, r4
 8000716:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800071a:	fb07 f006 	mul.w	r0, r7, r6
 800071e:	4298      	cmp	r0, r3
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x11c>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f106 34ff 	add.w	r4, r6, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x11a>
 800072c:	4298      	cmp	r0, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2b4>
 8000732:	4626      	mov	r6, r4
 8000734:	1a1c      	subs	r4, r3, r0
 8000736:	fa1f f38e 	uxth.w	r3, lr
 800073a:	fbb4 f0f8 	udiv	r0, r4, r8
 800073e:	fb08 4410 	mls	r4, r8, r0, r4
 8000742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000746:	fb00 f707 	mul.w	r7, r0, r7
 800074a:	429f      	cmp	r7, r3
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x148>
 800074e:	eb1c 0303 	adds.w	r3, ip, r3
 8000752:	f100 34ff 	add.w	r4, r0, #4294967295
 8000756:	d202      	bcs.n	800075e <__udivmoddi4+0x146>
 8000758:	429f      	cmp	r7, r3
 800075a:	f200 80b0 	bhi.w	80008be <__udivmoddi4+0x2a6>
 800075e:	4620      	mov	r0, r4
 8000760:	1bdb      	subs	r3, r3, r7
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	e7a5      	b.n	80006b4 <__udivmoddi4+0x9c>
 8000768:	f1c1 0620 	rsb	r6, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 f706 	lsr.w	r7, r2, r6
 8000772:	431f      	orrs	r7, r3
 8000774:	fa20 fc06 	lsr.w	ip, r0, r6
 8000778:	fa04 f301 	lsl.w	r3, r4, r1
 800077c:	ea43 030c 	orr.w	r3, r3, ip
 8000780:	40f4      	lsrs	r4, r6
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	0c38      	lsrs	r0, r7, #16
 8000788:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800078c:	fbb4 fef0 	udiv	lr, r4, r0
 8000790:	fa1f fc87 	uxth.w	ip, r7
 8000794:	fb00 441e 	mls	r4, r0, lr, r4
 8000798:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079c:	fb0e f90c 	mul.w	r9, lr, ip
 80007a0:	45a1      	cmp	r9, r4
 80007a2:	fa02 f201 	lsl.w	r2, r2, r1
 80007a6:	d90a      	bls.n	80007be <__udivmoddi4+0x1a6>
 80007a8:	193c      	adds	r4, r7, r4
 80007aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ae:	f080 8084 	bcs.w	80008ba <__udivmoddi4+0x2a2>
 80007b2:	45a1      	cmp	r9, r4
 80007b4:	f240 8081 	bls.w	80008ba <__udivmoddi4+0x2a2>
 80007b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007bc:	443c      	add	r4, r7
 80007be:	eba4 0409 	sub.w	r4, r4, r9
 80007c2:	fa1f f983 	uxth.w	r9, r3
 80007c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ca:	fb00 4413 	mls	r4, r0, r3, r4
 80007ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d6:	45a4      	cmp	ip, r4
 80007d8:	d907      	bls.n	80007ea <__udivmoddi4+0x1d2>
 80007da:	193c      	adds	r4, r7, r4
 80007dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80007e0:	d267      	bcs.n	80008b2 <__udivmoddi4+0x29a>
 80007e2:	45a4      	cmp	ip, r4
 80007e4:	d965      	bls.n	80008b2 <__udivmoddi4+0x29a>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	443c      	add	r4, r7
 80007ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007ee:	fba0 9302 	umull	r9, r3, r0, r2
 80007f2:	eba4 040c 	sub.w	r4, r4, ip
 80007f6:	429c      	cmp	r4, r3
 80007f8:	46ce      	mov	lr, r9
 80007fa:	469c      	mov	ip, r3
 80007fc:	d351      	bcc.n	80008a2 <__udivmoddi4+0x28a>
 80007fe:	d04e      	beq.n	800089e <__udivmoddi4+0x286>
 8000800:	b155      	cbz	r5, 8000818 <__udivmoddi4+0x200>
 8000802:	ebb8 030e 	subs.w	r3, r8, lr
 8000806:	eb64 040c 	sbc.w	r4, r4, ip
 800080a:	fa04 f606 	lsl.w	r6, r4, r6
 800080e:	40cb      	lsrs	r3, r1
 8000810:	431e      	orrs	r6, r3
 8000812:	40cc      	lsrs	r4, r1
 8000814:	e9c5 6400 	strd	r6, r4, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	e750      	b.n	80006be <__udivmoddi4+0xa6>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f103 	lsr.w	r1, r0, r3
 8000824:	fa0c fc02 	lsl.w	ip, ip, r2
 8000828:	fa24 f303 	lsr.w	r3, r4, r3
 800082c:	4094      	lsls	r4, r2
 800082e:	430c      	orrs	r4, r1
 8000830:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000834:	fa00 fe02 	lsl.w	lr, r0, r2
 8000838:	fa1f f78c 	uxth.w	r7, ip
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3110 	mls	r1, r8, r0, r3
 8000844:	0c23      	lsrs	r3, r4, #16
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb00 f107 	mul.w	r1, r0, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x24c>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f100 36ff 	add.w	r6, r0, #4294967295
 800085a:	d22c      	bcs.n	80008b6 <__udivmoddi4+0x29e>
 800085c:	4299      	cmp	r1, r3
 800085e:	d92a      	bls.n	80008b6 <__udivmoddi4+0x29e>
 8000860:	3802      	subs	r0, #2
 8000862:	4463      	add	r3, ip
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f1f8 	udiv	r1, r3, r8
 800086c:	fb08 3311 	mls	r3, r8, r1, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb01 f307 	mul.w	r3, r1, r7
 8000878:	42a3      	cmp	r3, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x276>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f101 36ff 	add.w	r6, r1, #4294967295
 8000884:	d213      	bcs.n	80008ae <__udivmoddi4+0x296>
 8000886:	42a3      	cmp	r3, r4
 8000888:	d911      	bls.n	80008ae <__udivmoddi4+0x296>
 800088a:	3902      	subs	r1, #2
 800088c:	4464      	add	r4, ip
 800088e:	1ae4      	subs	r4, r4, r3
 8000890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000894:	e739      	b.n	800070a <__udivmoddi4+0xf2>
 8000896:	4604      	mov	r4, r0
 8000898:	e6f0      	b.n	800067c <__udivmoddi4+0x64>
 800089a:	4608      	mov	r0, r1
 800089c:	e706      	b.n	80006ac <__udivmoddi4+0x94>
 800089e:	45c8      	cmp	r8, r9
 80008a0:	d2ae      	bcs.n	8000800 <__udivmoddi4+0x1e8>
 80008a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008aa:	3801      	subs	r0, #1
 80008ac:	e7a8      	b.n	8000800 <__udivmoddi4+0x1e8>
 80008ae:	4631      	mov	r1, r6
 80008b0:	e7ed      	b.n	800088e <__udivmoddi4+0x276>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e799      	b.n	80007ea <__udivmoddi4+0x1d2>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e7d4      	b.n	8000864 <__udivmoddi4+0x24c>
 80008ba:	46d6      	mov	lr, sl
 80008bc:	e77f      	b.n	80007be <__udivmoddi4+0x1a6>
 80008be:	4463      	add	r3, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e74d      	b.n	8000760 <__udivmoddi4+0x148>
 80008c4:	4606      	mov	r6, r0
 80008c6:	4623      	mov	r3, r4
 80008c8:	4608      	mov	r0, r1
 80008ca:	e70f      	b.n	80006ec <__udivmoddi4+0xd4>
 80008cc:	3e02      	subs	r6, #2
 80008ce:	4463      	add	r3, ip
 80008d0:	e730      	b.n	8000734 <__udivmoddi4+0x11c>
 80008d2:	bf00      	nop

080008d4 <__aeabi_idiv0>:
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <_ZL19Modbus_CalculateCRCPht>:
    modbusState.lastValue = 0;
    return MODBUS_OK;
}

function inline
u16 Modbus_CalculateCRC(u8 *buffer, u16 length) {
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	807b      	strh	r3, [r7, #2]
    u16 crc = 0xFFFF;
 80008e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008e8:	81fb      	strh	r3, [r7, #14]
    for (u16 i = 0; i < length; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	e022      	b.n	8000936 <_ZL19Modbus_CalculateCRCPht+0x5e>
        crc ^= buffer[i];
 80008f0:	89bb      	ldrh	r3, [r7, #12]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	4053      	eors	r3, r2
 80008fe:	81fb      	strh	r3, [r7, #14]
        for (u8 j = 0; j < 8; j++) {
 8000900:	2300      	movs	r3, #0
 8000902:	72fb      	strb	r3, [r7, #11]
 8000904:	e011      	b.n	800092a <_ZL19Modbus_CalculateCRCPht+0x52>
            if (crc & 0x0001) {
 8000906:	89fb      	ldrh	r3, [r7, #14]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <_ZL19Modbus_CalculateCRCPht+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <_ZL19Modbus_CalculateCRCPht+0x74>)
 8000918:	4053      	eors	r3, r2
 800091a:	81fb      	strh	r3, [r7, #14]
 800091c:	e002      	b.n	8000924 <_ZL19Modbus_CalculateCRCPht+0x4c>
            } else {
                crc >>= 1;
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	81fb      	strh	r3, [r7, #14]
        for (u8 j = 0; j < 8; j++) {
 8000924:	7afb      	ldrb	r3, [r7, #11]
 8000926:	3301      	adds	r3, #1
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	2b07      	cmp	r3, #7
 800092e:	d9ea      	bls.n	8000906 <_ZL19Modbus_CalculateCRCPht+0x2e>
    for (u16 i = 0; i < length; i++) {
 8000930:	89bb      	ldrh	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	81bb      	strh	r3, [r7, #12]
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	429a      	cmp	r2, r3
 800093c:	d3d8      	bcc.n	80008f0 <_ZL19Modbus_CalculateCRCPht+0x18>
            }
        }
    }
    return crc;
 800093e:	89fb      	ldrh	r3, [r7, #14]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	ffffa001 	.word	0xffffa001

08000950 <_ZL18Modbus_SendCommandPht>:


// u8 modbus_send_command();

function inline 
u8 Modbus_SendCommand(u8 *request, u16 length) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, request, length, MODBUS_RESPONSE_TIMEOUT);
 800095c:	887a      	ldrh	r2, [r7, #2]
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <_ZL18Modbus_SendCommandPht+0x34>)
 8000966:	f004 fa0b 	bl	8004d80 <HAL_UART_Transmit>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK) ? MODBUS_OK : MODBUS_ERROR_TIMEOUT;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <_ZL18Modbus_SendCommandPht+0x28>
 8000974:	2300      	movs	r3, #0
 8000976:	e000      	b.n	800097a <_ZL18Modbus_SendCommandPht+0x2a>
 8000978:	2302      	movs	r3, #2
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001f8 	.word	0x200001f8

08000988 <_ZL19Motor_Excitation_ONh>:
    
    return Modbus_SendCommand(request, 13);
}

function inline
u8 Motor_Excitation_ON(u8 motorID) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
    u8 request[16] = {0};
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
    
    request[0] = motorID;           // Address
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	733b      	strb	r3, [r7, #12]
    request[1] = 0x10;             // Function code
 80009a6:	2310      	movs	r3, #16
 80009a8:	737b      	strb	r3, [r7, #13]
    request[2] = 0x00;             // Register address high
 80009aa:	2300      	movs	r3, #0
 80009ac:	73bb      	strb	r3, [r7, #14]
    request[3] = 0x7C;             // Register address low
 80009ae:	237c      	movs	r3, #124	@ 0x7c
 80009b0:	73fb      	strb	r3, [r7, #15]
    request[4] = 0x00;             // Number of registers high
 80009b2:	2300      	movs	r3, #0
 80009b4:	743b      	strb	r3, [r7, #16]
    request[5] = 0x02;             // Number of registers low
 80009b6:	2302      	movs	r3, #2
 80009b8:	747b      	strb	r3, [r7, #17]
    request[6] = 0x04;             // Byte count
 80009ba:	2304      	movs	r3, #4
 80009bc:	74bb      	strb	r3, [r7, #18]
    request[7] = 0x00;             // Data high
 80009be:	2300      	movs	r3, #0
 80009c0:	74fb      	strb	r3, [r7, #19]
    request[8] = 0x00;             // Data
 80009c2:	2300      	movs	r3, #0
 80009c4:	753b      	strb	r3, [r7, #20]
    request[9] = 0x00;             // Data
 80009c6:	2300      	movs	r3, #0
 80009c8:	757b      	strb	r3, [r7, #21]
    request[10] = 0x01;            // Data low (ON)
 80009ca:	2301      	movs	r3, #1
 80009cc:	75bb      	strb	r3, [r7, #22]
    
    u16 crc = Modbus_CalculateCRC(request, 11);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	210b      	movs	r1, #11
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff7f 	bl	80008d8 <_ZL19Modbus_CalculateCRCPht>
 80009da:	4603      	mov	r3, r0
 80009dc:	83fb      	strh	r3, [r7, #30]
    request[11] = crc & 0xFF;
 80009de:	8bfb      	ldrh	r3, [r7, #30]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	75fb      	strb	r3, [r7, #23]
    request[12] = (crc >> 8) & 0xFF;
 80009e4:	8bfb      	ldrh	r3, [r7, #30]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	763b      	strb	r3, [r7, #24]
    
    return Modbus_SendCommand(request, 13);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	210d      	movs	r1, #13
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffab 	bl	8000950 <_ZL18Modbus_SendCommandPht>
 80009fa:	4603      	mov	r3, r0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZL20Motor_Excitation_OFFh>:

function inline
u8 Motor_Excitation_OFF(u8 motorID) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    u8 request[16] = {0};
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
    
    request[0] = motorID;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	733b      	strb	r3, [r7, #12]
    request[1] = 0x10;
 8000a22:	2310      	movs	r3, #16
 8000a24:	737b      	strb	r3, [r7, #13]
    request[2] = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
    request[3] = 0x7C;
 8000a2a:	237c      	movs	r3, #124	@ 0x7c
 8000a2c:	73fb      	strb	r3, [r7, #15]
    request[4] = 0x00;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	743b      	strb	r3, [r7, #16]
    request[5] = 0x02;
 8000a32:	2302      	movs	r3, #2
 8000a34:	747b      	strb	r3, [r7, #17]
    request[6] = 0x04;
 8000a36:	2304      	movs	r3, #4
 8000a38:	74bb      	strb	r3, [r7, #18]
    request[7] = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	74fb      	strb	r3, [r7, #19]
    request[8] = 0x00;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	753b      	strb	r3, [r7, #20]
    request[9] = 0x00;
 8000a42:	2300      	movs	r3, #0
 8000a44:	757b      	strb	r3, [r7, #21]
    request[10] = 0x00;            // OFF
 8000a46:	2300      	movs	r3, #0
 8000a48:	75bb      	strb	r3, [r7, #22]
    
    u16 crc = Modbus_CalculateCRC(request, 11);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	210b      	movs	r1, #11
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff41 	bl	80008d8 <_ZL19Modbus_CalculateCRCPht>
 8000a56:	4603      	mov	r3, r0
 8000a58:	83fb      	strh	r3, [r7, #30]
    request[11] = crc & 0xFF;
 8000a5a:	8bfb      	ldrh	r3, [r7, #30]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	75fb      	strb	r3, [r7, #23]
    request[12] = (crc >> 8) & 0xFF;
 8000a60:	8bfb      	ldrh	r3, [r7, #30]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	763b      	strb	r3, [r7, #24]
    
    return Modbus_SendCommand(request, 13);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	210d      	movs	r1, #13
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff6d 	bl	8000950 <_ZL18Modbus_SendCommandPht>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_ZL19Motor_Speed_Controlhs>:


function inline
u8 Motor_Speed_Control(u8 motorID, i16 speed) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	@ 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
    u8 request[40] = {0};
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2224      	movs	r2, #36	@ 0x24
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 fec7 	bl	8005830 <memset>
    
    request[0] = motorID;                // Address
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	723b      	strb	r3, [r7, #8]
    request[1] = 0x10;                   // Function code
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	727b      	strb	r3, [r7, #9]
    request[2] = 0x00;                   // Register address high
 8000aaa:	2300      	movs	r3, #0
 8000aac:	72bb      	strb	r3, [r7, #10]
    request[3] = 0x5A;                   // Register address low
 8000aae:	235a      	movs	r3, #90	@ 0x5a
 8000ab0:	72fb      	strb	r3, [r7, #11]
    request[4] = 0x00;                   // Number of registers high
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	733b      	strb	r3, [r7, #12]
    request[5] = 0x0E;                   // Number of registers low
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	737b      	strb	r3, [r7, #13]
    request[6] = 0x1C;                   // Byte count
 8000aba:	231c      	movs	r3, #28
 8000abc:	73bb      	strb	r3, [r7, #14]
    
    // Operation type (Continuous operation speed control)
    request[7] = 0x00;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
    request[8] = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	743b      	strb	r3, [r7, #16]
    request[9] = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	747b      	strb	r3, [r7, #17]
    request[10] = 0x30;
 8000aca:	2330      	movs	r3, #48	@ 0x30
 8000acc:	74bb      	strb	r3, [r7, #18]
    
    // Position (unused)
    request[11] = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	74fb      	strb	r3, [r7, #19]
    request[12] = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	753b      	strb	r3, [r7, #20]
    request[13] = 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	757b      	strb	r3, [r7, #21]
    request[14] = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	75bb      	strb	r3, [r7, #22]
    
    // Speed
    if (speed >= 0) {
 8000ade:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0c      	blt.n	8000b00 <_ZL19Motor_Speed_Controlhs+0x80>
        // Positive values: 00 00 followed by value
        request[15] = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75fb      	strb	r3, [r7, #23]
        request[16] = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	763b      	strb	r3, [r7, #24]
        request[17] = (speed >> 8) & 0xFF;
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	767b      	strb	r3, [r7, #25]
        request[18] = speed & 0xFF;
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	76bb      	strb	r3, [r7, #26]
 8000afe:	e011      	b.n	8000b24 <_ZL19Motor_Speed_Controlhs+0xa4>
    } else {
        
        i32 fullValue = speed;  
 8000b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
        request[15] = (fullValue >> 24) & 0xFF; 
 8000b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b08:	0e1b      	lsrs	r3, r3, #24
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	75fb      	strb	r3, [r7, #23]
        request[16] = (fullValue >> 16) & 0xFF; 
 8000b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b10:	141b      	asrs	r3, r3, #16
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	763b      	strb	r3, [r7, #24]
        request[17] = (fullValue >> 8) & 0xFF;   
 8000b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b18:	121b      	asrs	r3, r3, #8
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	767b      	strb	r3, [r7, #25]
        request[18] = fullValue & 0xFF;      
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	76bb      	strb	r3, [r7, #26]
    }
    
    // Acceleration
    request[19] = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	76fb      	strb	r3, [r7, #27]
    request[20] = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	773b      	strb	r3, [r7, #28]
    request[21] = (DEFAULT_ACCELERATION >> 8) & 0xFF;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	777b      	strb	r3, [r7, #29]
    request[22] = DEFAULT_ACCELERATION & 0xFF;
 8000b30:	23e8      	movs	r3, #232	@ 0xe8
 8000b32:	77bb      	strb	r3, [r7, #30]
    
    // Deceleration
    request[23] = 0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	77fb      	strb	r3, [r7, #31]
    request[24] = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3020 	strb.w	r3, [r7, #32]
    request[25] = (DEFAULT_DECELERATION >> 8) & 0xFF;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    request[26] = DEFAULT_DECELERATION & 0xFF;
 8000b44:	23e8      	movs	r3, #232	@ 0xe8
 8000b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    
    // Torque limit
    request[27] = 0x00;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    request[28] = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    request[29] = (DEFAULT_TORQUE_LIMIT >> 8) & 0xFF;
 8000b56:	2303      	movs	r3, #3
 8000b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    request[30] = DEFAULT_TORQUE_LIMIT & 0xFF;
 8000b5c:	2384      	movs	r3, #132	@ 0x84
 8000b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    
    // Trigger
    request[31] = 0x00;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    request[32] = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    request[33] = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    request[34] = 0x01;
 8000b74:	2301      	movs	r3, #1
 8000b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    
    u16 crc = Modbus_CalculateCRC(request, 35);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2123      	movs	r1, #35	@ 0x23
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fea9 	bl	80008d8 <_ZL19Modbus_CalculateCRCPht>
 8000b86:	4603      	mov	r3, r0
 8000b88:	867b      	strh	r3, [r7, #50]	@ 0x32
    request[35] = crc & 0xFF;
 8000b8a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    request[36] = (crc >> 8) & 0xFF;
 8000b92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    
    return Modbus_SendCommand(request, 37);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	2125      	movs	r1, #37	@ 0x25
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fed3 	bl	8000950 <_ZL18Modbus_SendCommandPht>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	@ 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_Z18Motor_CW_Low_Speedh>:


// NOTE(rsb): CW Speed Control Functions

u8 Motor_CW_Low_Speed(uint8_t motorID) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_LOW : M2_SPEED_LOW;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <_Z18Motor_CW_Low_Speedh+0x16>
 8000bc4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000bc8:	e000      	b.n	8000bcc <_Z18Motor_CW_Low_Speedh+0x18>
 8000bca:	23c8      	movs	r3, #200	@ 0xc8
 8000bcc:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000bce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff52 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_Z18Motor_CW_Mid_Speedh>:

u8 Motor_CW_Mid_Speed(u8 motorID) {
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_MID : M2_SPEED_MID;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d102      	bne.n	8000bfc <_Z18Motor_CW_Mid_Speedh+0x16>
 8000bf6:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000bfa:	e001      	b.n	8000c00 <_Z18Motor_CW_Mid_Speedh+0x1a>
 8000bfc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c00:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000c02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff38 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_Z19Motor_CW_High_Speedh>:

u8 Motor_CW_High_Speed(u8 motorID) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_HIGH : M2_SPEED_HIGH;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <_Z19Motor_CW_High_Speedh+0x16>
 8000c2a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c2e:	e001      	b.n	8000c34 <_Z19Motor_CW_High_Speedh+0x1a>
 8000c30:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000c34:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, speed);
 8000c36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff1e 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_Z19Motor_CCW_Low_Speedh>:

// CCW Speed Control Functions
u8 Motor_CCW_Low_Speed(u8 motorID) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_LOW : M2_SPEED_LOW;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d102      	bne.n	8000c64 <_Z19Motor_CCW_Low_Speedh+0x16>
 8000c5e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c62:	e000      	b.n	8000c66 <_Z19Motor_CCW_Low_Speedh+0x18>
 8000c64:	23c8      	movs	r3, #200	@ 0xc8
 8000c66:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff03 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000c7a:	4603      	mov	r3, r0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_Z19Motor_CCW_Mid_Speedh>:

u8 Motor_CCW_Mid_Speed(u8 motorID) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_MID : M2_SPEED_MID;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <_Z19Motor_CCW_Mid_Speedh+0x16>
 8000c94:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000c98:	e001      	b.n	8000c9e <_Z19Motor_CCW_Mid_Speedh+0x1a>
 8000c9a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c9e:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fee7 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000cb2:	4603      	mov	r3, r0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_Z20Motor_CCW_High_Speedh>:

u8 Motor_CCW_High_Speed(u8 motorID) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    u16 speed = (motorID == DRUM_MOTOR_ID) ? M1_SPEED_HIGH : M2_SPEED_HIGH;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d102      	bne.n	8000cd2 <_Z20Motor_CCW_High_Speedh+0x16>
 8000ccc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000cd0:	e001      	b.n	8000cd6 <_Z20Motor_CCW_High_Speedh+0x1a>
 8000cd2:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000cd6:	81fb      	strh	r3, [r7, #14]
    return Motor_Speed_Control(motorID, -speed);
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	425b      	negs	r3, r3
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fecb 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000cea:	4603      	mov	r3, r0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_Z10Motor_Stoph>:

u8 Motor_Stop(u8 motorID) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    return Motor_Speed_Control(motorID, 0);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff febc 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_ZL13writeRegisterP11ADS1xx5_I2Cht>:




// Write the register
static void writeRegister(ADS1xx5_I2C *i2c, uint8_t reg, uint16_t value) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af02      	add	r7, sp, #8
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	803b      	strh	r3, [r7, #0]
	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	733b      	strb	r3, [r7, #12]
 8000d26:	883b      	ldrh	r3, [r7, #0]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	737b      	strb	r3, [r7, #13]
 8000d30:	883b      	ldrh	r3, [r7, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68d8      	ldr	r0, [r3, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	f107 020c 	add.w	r2, r7, #12
 8000d42:	230a      	movs	r3, #10
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	f001 fd1c 	bl	8002784 <HAL_I2C_Master_Transmit>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZL12readRegisterP11ADS1xx5_I2Ch>:

// Read the register
static uint16_t readRegister(ADS1xx5_I2C *i2c, uint8_t reg) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68d8      	ldr	r0, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	8819      	ldrh	r1, [r3, #0]
 8000d68:	1cfa      	adds	r2, r7, #3
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f001 fd08 	bl	8002784 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 8000d74:	2300      	movs	r3, #0
 8000d76:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68d8      	ldr	r0, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	f107 020c 	add.w	r2, r7, #12
 8000d84:	230a      	movs	r3, #10
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f001 fe13 	bl	80029b4 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZL8ADSbeginP11ADS1xx5_I2C>:

// Check if we have correct connection.
static void ADSbegin(ADS1xx5_I2C *i2c) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68d8      	ldr	r0, [r3, #12]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	8819      	ldrh	r1, [r3, #0]
 8000db6:	230a      	movs	r3, #10
 8000db8:	220a      	movs	r2, #10
 8000dba:	f001 fef1 	bl	8002ba0 <HAL_I2C_IsDeviceReady>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <_ZL8ADSbeginP11ADS1xx5_I2C+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd6:	f001 fc21 	bl	800261c <HAL_GPIO_WritePin>
    
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_Z7ADS1115P11ADS1xx5_I2CP19__I2C_HandleTypeDefh>:
	i2c->m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
	ADSbegin(i2c);
}

// Declare an ADS1115 structure
void ADS1115(ADS1xx5_I2C *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71fb      	strb	r3, [r7, #7]
	i2c->hi2c = hi2c;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	60da      	str	r2, [r3, #12]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2208      	movs	r2, #8
 8000e06:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_ONE; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	815a      	strh	r2, [r3, #10]
	ADSbegin(i2c);
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ffc5 	bl	8000da6 <_ZL8ADSbeginP11ADS1xx5_I2C>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_Z10ADSsetGainP11ADS1xx5_I2C9adsGain_t>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ADS1xx5_I2C *i2c, adsGain_t gain) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	815a      	strh	r2, [r3, #10]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_Z27ADSreadADC_Differential_0_1P11ADS1xx5_I2C>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ADS1xx5_I2C *i2c) {
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	// Start with default values
	uint16_t config =
 8000e4a:	f240 1383 	movw	r3, #387	@ 0x183
 8000e4e:	81bb      	strh	r3, [r7, #12]
        ADS1015_REG_CONFIG_CMODE_TRAD 	|   // Traditional comparator (default val)
        ADS1015_REG_CONFIG_DR_1600SPS 	|   // 1600 samples per second (default)
        ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)
    
	// Set PGA/voltage range
	config |= i2c->m_gain;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	895a      	ldrh	r2, [r3, #10]
 8000e54:	89bb      	ldrh	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
    
	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N
    
	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e64:	81bb      	strh	r3, [r7, #12]
    
	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff50 	bl	8000d12 <_ZL13writeRegisterP11ADS1xx5_I2Cht>
    
	// Wait for the conversion to complete
	HAL_Delay(i2c->m_conversionDelay);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f934 	bl	80020e4 <HAL_Delay>
    
	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff68 	bl	8000d54 <_ZL12readRegisterP11ADS1xx5_I2Ch>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7a1b      	ldrb	r3, [r3, #8]
 8000e8c:	fa42 f303 	asr.w	r3, r2, r3
 8000e90:	81fb      	strh	r3, [r7, #14]
	if (i2c->m_bitShift == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7a1b      	ldrb	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <_Z27ADSreadADC_Differential_0_1P11ADS1xx5_I2C+0x5e>
		return (int16_t) res;
 8000e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9e:	e00b      	b.n	8000eb8 <_Z27ADSreadADC_Differential_0_1P11ADS1xx5_I2C+0x76>
	} else {
		// Shift 12-bit results right 4 bits for the ADS1015,
		// making sure we keep the sign bit intact
		if (res > 0x07FF) {
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ea6:	d305      	bcc.n	8000eb4 <_Z27ADSreadADC_Differential_0_1P11ADS1xx5_I2C+0x72>
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000eae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000eb2:	81fb      	strh	r3, [r7, #14]
		}
		return (int16_t) res;
 8000eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_Z8PID_loopv>:

extern I2C_HandleTypeDef hi2c3;
ADS1xx5_I2C i2c;

float PID_loop(void) 
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
    // Filter variables
    static float filtered_tension = 0.0f;
    static float alpha = 0.2f; // Filter coefficient (0.0-1.0) - lower = more filtering
    
    // Initialize ADC
    ADS1115(&i2c, &hi2c3, ADS_ADDR_GND); 
 8000ec6:	2248      	movs	r2, #72	@ 0x48
 8000ec8:	495a      	ldr	r1, [pc, #360]	@ (8001034 <_Z8PID_loopv+0x174>)
 8000eca:	485b      	ldr	r0, [pc, #364]	@ (8001038 <_Z8PID_loopv+0x178>)
 8000ecc:	f7ff ff89 	bl	8000de2 <_Z7ADS1115P11ADS1xx5_I2CP19__I2C_HandleTypeDefh>
    ADSsetGain(&i2c, GAIN_FOUR); 
 8000ed0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000ed4:	4858      	ldr	r0, [pc, #352]	@ (8001038 <_Z8PID_loopv+0x178>)
 8000ed6:	f7ff ffa5 	bl	8000e24 <_Z10ADSsetGainP11ADS1xx5_I2C9adsGain_t>
    
    // Read tension values
    i32 raw_tension = ADSreadADC_Differential_0_1(&i2c);
 8000eda:	4857      	ldr	r0, [pc, #348]	@ (8001038 <_Z8PID_loopv+0x178>)
 8000edc:	f7ff ffb1 	bl	8000e42 <_Z27ADSreadADC_Differential_0_1P11ADS1xx5_I2C>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	607b      	str	r3, [r7, #4]
    //Prev_Tension = Tension;
    
    // Apply low-pass filter to smooth tension readings
    filtered_tension = alpha * raw_tension + (1.0f - alpha) * filtered_tension;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	4b53      	ldr	r3, [pc, #332]	@ (800103c <_Z8PID_loopv+0x17c>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef8:	4b50      	ldr	r3, [pc, #320]	@ (800103c <_Z8PID_loopv+0x17c>)
 8000efa:	edd3 7a00 	vldr	s15, [r3]
 8000efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f06:	4b4e      	ldr	r3, [pc, #312]	@ (8001040 <_Z8PID_loopv+0x180>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	4b4a      	ldr	r3, [pc, #296]	@ (8001040 <_Z8PID_loopv+0x180>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]
    i32 Tension = filtered_tension;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <_Z8PID_loopv+0x180>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
 8000f28:	603b      	str	r3, [r7, #0]
    
    // Calculate error (positive when tension is higher than setpoint)
    error = Tension - tension_setpoint;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	4b43      	ldr	r3, [pc, #268]	@ (8001044 <_Z8PID_loopv+0x184>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3e:	4b42      	ldr	r3, [pc, #264]	@ (8001048 <_Z8PID_loopv+0x188>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]
    
    // Calculate PID components
    integral += error;
 8000f44:	4b41      	ldr	r3, [pc, #260]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001048 <_Z8PID_loopv+0x188>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000f56:	edc3 7a00 	vstr	s15, [r3]
    derivative = error - last_error;
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <_Z8PID_loopv+0x188>)
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <_Z8PID_loopv+0x190>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <_Z8PID_loopv+0x194>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
    
    // Improved anti-windup for integral term
    if(integral > 1000) integral = 1000;
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001058 <_Z8PID_loopv+0x198>
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd02      	ble.n	8000f8a <_Z8PID_loopv+0xca>
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000f86:	4a35      	ldr	r2, [pc, #212]	@ (800105c <_Z8PID_loopv+0x19c>)
 8000f88:	601a      	str	r2, [r3, #0]
    if(integral < -1000) integral = -1000; // Allow negative values within limits
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001060 <_Z8PID_loopv+0x1a0>
 8000f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d502      	bpl.n	8000fa4 <_Z8PID_loopv+0xe4>
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000fa0:	4a30      	ldr	r2, [pc, #192]	@ (8001064 <_Z8PID_loopv+0x1a4>)
 8000fa2:	601a      	str	r2, [r3, #0]
    
    // Calculate motor speed - higher tension means higher speed
    motor_speed = Kp * error + Ki * integral + Kd * derivative;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <_Z8PID_loopv+0x1a8>)
 8000fa6:	ed93 7a00 	vldr	s14, [r3]
 8000faa:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <_Z8PID_loopv+0x188>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <_Z8PID_loopv+0x1ac>)
 8000fb6:	edd3 6a00 	vldr	s13, [r3]
 8000fba:	4b24      	ldr	r3, [pc, #144]	@ (800104c <_Z8PID_loopv+0x18c>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <_Z8PID_loopv+0x1b0>)
 8000fca:	edd3 6a00 	vldr	s13, [r3]
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <_Z8PID_loopv+0x194>)
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8000fde:	edc3 7a00 	vstr	s15, [r3]
    
    // Limit motor speed with smoother approach
    if(motor_speed < 0.0f) {
 8000fe2:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	d503      	bpl.n	8000ffa <_Z8PID_loopv+0x13a>
        motor_speed = 0;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    }
    
    if(motor_speed > max_tension) motor_speed = max_tension; 
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <_Z8PID_loopv+0x1b8>)
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	dd03      	ble.n	8001018 <_Z8PID_loopv+0x158>
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <_Z8PID_loopv+0x1b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8001016:	6013      	str	r3, [r2, #0]
    
    // Save error for next iteration
    last_error = error;
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <_Z8PID_loopv+0x188>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <_Z8PID_loopv+0x190>)
 800101e:	6013      	str	r3, [r2, #0]
    
    return motor_speed;
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <_Z8PID_loopv+0x1b4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000d0 	.word	0x200000d0
 8001038:	2000008c 	.word	0x2000008c
 800103c:	2000000c 	.word	0x2000000c
 8001040:	200000b8 	.word	0x200000b8
 8001044:	2000009c 	.word	0x2000009c
 8001048:	200000a0 	.word	0x200000a0
 800104c:	200000a8 	.word	0x200000a8
 8001050:	200000a4 	.word	0x200000a4
 8001054:	200000ac 	.word	0x200000ac
 8001058:	447a0000 	.word	0x447a0000
 800105c:	447a0000 	.word	0x447a0000
 8001060:	c47a0000 	.word	0xc47a0000
 8001064:	c47a0000 	.word	0xc47a0000
 8001068:	20000000 	.word	0x20000000
 800106c:	200000b0 	.word	0x200000b0
 8001070:	20000004 	.word	0x20000004
 8001074:	200000b4 	.word	0x200000b4
 8001078:	20000008 	.word	0x20000008

0800107c <_Z15Pay_Out_controlv>:


void Pay_Out_control(void) 
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
    float set_speed = PID_loop();
 8001082:	f7ff ff1d 	bl	8000ec0 <_Z8PID_loopv>
 8001086:	ed87 0a00 	vstr	s0, [r7]
    r32 motor_speed = 0;
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
    
    // Only activate motors if set_speed is above threshold (5)
    if (set_speed >= 5.0f) {
 8001090:	edd7 7a00 	vldr	s15, [r7]
 8001094:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	db0b      	blt.n	80010ba <_Z15Pay_Out_controlv+0x3e>
        // Map from range [5, 100] to [0, 3000]
        motor_speed = (set_speed - 5.0f) * (3000.0f / (100.0f - 5.0f));
 80010a2:	edd7 7a00 	vldr	s15, [r7]
 80010a6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ae:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001104 <_Z15Pay_Out_controlv+0x88>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    
    Motor_Speed_Control(DRUM_MOTOR_ID, motor_speed);
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c2:	ee17 3a90 	vmov	r3, s15
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	2001      	movs	r0, #1
 80010cc:	f7ff fcd8 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80010d0:	2008      	movs	r0, #8
 80010d2:	f001 f807 	bl	80020e4 <HAL_Delay>
    Motor_Speed_Control(SPOOLER_MOTOR_ID, motor_speed/4);
 80010d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010da:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fcc6 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80010f4:	2008      	movs	r0, #8
 80010f6:	f000 fff5 	bl	80020e4 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	41fca1af 	.word	0x41fca1af

08001108 <_Z14Pay_In_controlv>:


void Pay_In_control(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    float set_speed = PID_loop();
 800110e:	f7ff fed7 	bl	8000ec0 <_Z8PID_loopv>
 8001112:	ed87 0a00 	vstr	s0, [r7]
    
    // Map set_speed (0-100) to motor_speed (3000-0)
    // As set_speed increases, motor_speed decreases
    int32_t motor_speed;
    
    if (set_speed < 30) {
 8001116:	edd7 7a00 	vldr	s15, [r7]
 800111a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d514      	bpl.n	8001152 <_Z14Pay_In_controlv+0x4a>
        // Linear mapping from set_speed to motor_speed (inverted relationship)
        motor_speed = -1 *  (int32_t)(3000 * (1.0f - set_speed / 100.0f));
 8001128:	ed97 7a00 	vldr	s14, [r7]
 800112c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800118c <_Z14Pay_In_controlv+0x84>
 8001130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001134:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001190 <_Z14Pay_In_controlv+0x88>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001148:	ee17 3a90 	vmov	r3, s15
 800114c:	425b      	negs	r3, r3
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e001      	b.n	8001156 <_Z14Pay_In_controlv+0x4e>
    } else {
        // Beyond threshold, motor stops
        motor_speed = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
    }
    
    // Apply motor speed (can be positive or negative depending on your needs)
    Motor_Speed_Control(DRUM_MOTOR_ID, motor_speed);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fc8f 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
    HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001162:	2008      	movs	r0, #8
 8001164:	f000 ffbe 	bl	80020e4 <HAL_Delay>
    
    // Spooler runs at 1/4 the speed of the drum
    Motor_Speed_Control(SPOOLER_MOTOR_ID, motor_speed / 4);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	da00      	bge.n	8001170 <_Z14Pay_In_controlv+0x68>
 800116e:	3303      	adds	r3, #3
 8001170:	109b      	asrs	r3, r3, #2
 8001172:	b21b      	sxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	2002      	movs	r0, #2
 8001178:	f7ff fc82 	bl	8000a80 <_ZL19Motor_Speed_Controlhs>
    HAL_Delay(DELAY_BETWEEN_COMMAND);
 800117c:	2008      	movs	r0, #8
 800117e:	f000 ffb1 	bl	80020e4 <HAL_Delay>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	42c80000 	.word	0x42c80000
 8001190:	453b8000 	.word	0x453b8000

08001194 <_Z11ReadButtonsv>:
OperationMode currentMode = MODE_UNDEFINED;
ManualSpeed currentSpeed = SPEED_UNDEFINED;
Direction currentDirection = DIR_STOP;
u8 isNewDataReady = 0;

inline ButtonStates ReadButtons(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    ButtonStates states;
    
    // Read all buttons (high when pressed)
    states.mode_button = HAL_GPIO_ReadPin(GPIOC, MODE_IN_Pin);
 800119c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011a0:	4816      	ldr	r0, [pc, #88]	@ (80011fc <_Z11ReadButtonsv+0x68>)
 80011a2:	f001 fa23 	bl	80025ec <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	701a      	strb	r2, [r3, #0]
    states.cw_button = HAL_GPIO_ReadPin(GPIOC, CW_IN_Pin);
 80011ae:	2104      	movs	r1, #4
 80011b0:	4812      	ldr	r0, [pc, #72]	@ (80011fc <_Z11ReadButtonsv+0x68>)
 80011b2:	f001 fa1b 	bl	80025ec <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	705a      	strb	r2, [r3, #1]
    states.ccw_button = HAL_GPIO_ReadPin(GPIOC, CCW_IN_Pin);
 80011be:	2108      	movs	r1, #8
 80011c0:	480e      	ldr	r0, [pc, #56]	@ (80011fc <_Z11ReadButtonsv+0x68>)
 80011c2:	f001 fa13 	bl	80025ec <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	709a      	strb	r2, [r3, #2]
    states.low_speed = HAL_GPIO_ReadPin(GPIOC, SPEED_LOW_IN_Pin);
 80011ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <_Z11ReadButtonsv+0x68>)
 80011d4:	f001 fa0a 	bl	80025ec <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	70da      	strb	r2, [r3, #3]
    states.high_speed = HAL_GPIO_ReadPin(GPIOC, SPEED_HIGH_IN_Pin);
 80011e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <_Z11ReadButtonsv+0x68>)
 80011e6:	f001 fa01 	bl	80025ec <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	711a      	strb	r2, [r3, #4]
    
    return states;
 80011f2:	bf00      	nop
}
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	48000800 	.word	0x48000800

08001200 <_Z21ReadButtons_Debouncedv>:

#define DEBOUNCE_DELAY 50 

inline ButtonStates ReadButtons_Debounced(void) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
    ButtonStates states;
    ButtonStates tempStates;
    
    tempStates = ReadButtons();
 8001208:	463b      	mov	r3, r7
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffc2 	bl	8001194 <_Z11ReadButtonsv>
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	463a      	mov	r2, r7
 8001216:	6810      	ldr	r0, [r2, #0]
 8001218:	6018      	str	r0, [r3, #0]
 800121a:	7912      	ldrb	r2, [r2, #4]
 800121c:	711a      	strb	r2, [r3, #4]
    
    // Wait for debounce
    HAL_Delay(DEBOUNCE_DELAY);
 800121e:	2032      	movs	r0, #50	@ 0x32
 8001220:	f000 ff60 	bl	80020e4 <HAL_Delay>
    
    states = ReadButtons();
 8001224:	68fc      	ldr	r4, [r7, #12]
 8001226:	463b      	mov	r3, r7
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffb3 	bl	8001194 <_Z11ReadButtonsv>
 800122e:	4622      	mov	r2, r4
 8001230:	463b      	mov	r3, r7
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	6011      	str	r1, [r2, #0]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	7113      	strb	r3, [r2, #4]
    
    // Button is considered pressed only if both readings show it pressed
    states.mode_button &= tempStates.mode_button;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	7c3b      	ldrb	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	701a      	strb	r2, [r3, #0]
    states.cw_button &= tempStates.cw_button;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	785a      	ldrb	r2, [r3, #1]
 800124c:	7c7b      	ldrb	r3, [r7, #17]
 800124e:	4013      	ands	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	705a      	strb	r2, [r3, #1]
    states.ccw_button &= tempStates.ccw_button;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	789a      	ldrb	r2, [r3, #2]
 800125a:	7cbb      	ldrb	r3, [r7, #18]
 800125c:	4013      	ands	r3, r2
 800125e:	b2da      	uxtb	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	709a      	strb	r2, [r3, #2]
    states.low_speed &= tempStates.low_speed;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	78da      	ldrb	r2, [r3, #3]
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	4013      	ands	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	70da      	strb	r2, [r3, #3]
    states.high_speed &= tempStates.high_speed;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	791a      	ldrb	r2, [r3, #4]
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	711a      	strb	r2, [r3, #4]
    return states;
 8001280:	bf00      	nop
}
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
	...

0800128c <_Z19UpdateOperationModev>:

inline u8 UpdateOperationMode(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
    ButtonStates buttonStates = ReadButtons_Debounced();
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffb3 	bl	8001200 <_Z21ReadButtons_Debouncedv>
    
    if (buttonStates.mode_button) {
 800129a:	783b      	ldrb	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <_Z19UpdateOperationModev+0x1c>
        currentMode = MODE_AUTO;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <_Z19UpdateOperationModev+0x2c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e002      	b.n	80012ae <_Z19UpdateOperationModev+0x22>
    } else {
        currentMode = MODE_MANUAL;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <_Z19UpdateOperationModev+0x2c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
    } 
    return 0;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000010 	.word	0x20000010

080012bc <_Z20UpdateManualControlsv>:

inline u8 UpdateManualControls(void) {    
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    if (currentMode == MODE_MANUAL) {
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <_Z20UpdateManualControlsv+0x8c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d139      	bne.n	800133e <_Z20UpdateManualControlsv+0x82>
        ButtonStates buttonStates = ReadButtons_Debounced();
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff97 	bl	8001200 <_Z21ReadButtons_Debouncedv>
        
        // Speed logic - only triggers update when changed
        if (buttonStates.low_speed && buttonStates.high_speed) {
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <_Z20UpdateManualControlsv+0x2a>
 80012d8:	793b      	ldrb	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <_Z20UpdateManualControlsv+0x2a>
            currentSpeed = SPEED_MID;
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <_Z20UpdateManualControlsv+0x90>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e010      	b.n	8001308 <_Z20UpdateManualControlsv+0x4c>
        }
        else if (buttonStates.low_speed) {
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <_Z20UpdateManualControlsv+0x38>
            currentSpeed = SPEED_LOW;
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <_Z20UpdateManualControlsv+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e009      	b.n	8001308 <_Z20UpdateManualControlsv+0x4c>
        }
        else if (buttonStates.high_speed) {
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <_Z20UpdateManualControlsv+0x46>
            currentSpeed = SPEED_HIGH;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <_Z20UpdateManualControlsv+0x90>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e002      	b.n	8001308 <_Z20UpdateManualControlsv+0x4c>
        }
        else {
            currentSpeed = SPEED_UNDEFINED;
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <_Z20UpdateManualControlsv+0x90>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]
        }
        
        if (buttonStates.cw_button && buttonStates.ccw_button) {
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <_Z20UpdateManualControlsv+0x60>
 800130e:	78bb      	ldrb	r3, [r7, #2]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <_Z20UpdateManualControlsv+0x60>
            currentDirection = DIR_STOP;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <_Z20UpdateManualControlsv+0x94>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e010      	b.n	800133e <_Z20UpdateManualControlsv+0x82>
        }
        else if (buttonStates.cw_button) {
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <_Z20UpdateManualControlsv+0x6e>
            currentDirection = DIR_FORWARD;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <_Z20UpdateManualControlsv+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e009      	b.n	800133e <_Z20UpdateManualControlsv+0x82>
        } 
        else if (buttonStates.ccw_button) {
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <_Z20UpdateManualControlsv+0x7c>
            currentDirection = DIR_REVERSE;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <_Z20UpdateManualControlsv+0x94>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e002      	b.n	800133e <_Z20UpdateManualControlsv+0x82>
        } 
        else {
            currentDirection = DIR_STOP;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <_Z20UpdateManualControlsv+0x94>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000010 	.word	0x20000010
 800134c:	20000011 	.word	0x20000011
 8001350:	20000012 	.word	0x20000012

08001354 <_Z18UpdateAutoControlsv>:



inline u8 UpdateAutoControls(void) {    
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
    if (currentMode == MODE_AUTO) {
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <_Z18UpdateAutoControlsv+0x58>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d11e      	bne.n	80013a0 <_Z18UpdateAutoControlsv+0x4c>
        ButtonStates buttonStates = ReadButtons_Debounced();
 8001362:	463b      	mov	r3, r7
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff4b 	bl	8001200 <_Z21ReadButtons_Debouncedv>
        
        if (buttonStates.cw_button && buttonStates.ccw_button) {
 800136a:	787b      	ldrb	r3, [r7, #1]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <_Z18UpdateAutoControlsv+0x2a>
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <_Z18UpdateAutoControlsv+0x2a>
            currentDirection = DIR_STOP;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <_Z18UpdateAutoControlsv+0x5c>)
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e010      	b.n	80013a0 <_Z18UpdateAutoControlsv+0x4c>
        }
        else if (buttonStates.cw_button) {
 800137e:	787b      	ldrb	r3, [r7, #1]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <_Z18UpdateAutoControlsv+0x38>
            currentDirection = DIR_FORWARD;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <_Z18UpdateAutoControlsv+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e009      	b.n	80013a0 <_Z18UpdateAutoControlsv+0x4c>
        } 
        else if (buttonStates.ccw_button) {
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <_Z18UpdateAutoControlsv+0x46>
            currentDirection = DIR_REVERSE;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_Z18UpdateAutoControlsv+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e002      	b.n	80013a0 <_Z18UpdateAutoControlsv+0x4c>
        } 
        else {
            currentDirection = DIR_STOP;
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <_Z18UpdateAutoControlsv+0x5c>)
 800139c:	2202      	movs	r2, #2
 800139e:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000012 	.word	0x20000012

080013b4 <_Z13ControlSystemv>:

inline void ControlSystem(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    
    switch (currentMode) {
 80013b8:	4b68      	ldr	r3, [pc, #416]	@ (800155c <_Z13ControlSystemv+0x1a8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <_Z13ControlSystemv+0x12>
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d027      	beq.n	8001414 <_Z13ControlSystemv+0x60>
            HAL_Delay(DELAY_BETWEEN_COMMAND);
        }
        break;
        
        default:
        break;
 80013c4:	e0c7      	b.n	8001556 <_Z13ControlSystemv+0x1a2>
        Motor_Excitation_ON(DRUM_MOTOR_ID);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fade 	bl	8000988 <_ZL19Motor_Excitation_ONh>
        HAL_Delay(DELAY_BETWEEN_COMMAND);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f000 fe89 	bl	80020e4 <HAL_Delay>
        Motor_Excitation_ON(SPOOLER_MOTOR_ID);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff fad8 	bl	8000988 <_ZL19Motor_Excitation_ONh>
        HAL_Delay(DELAY_BETWEEN_COMMAND);
 80013d8:	2008      	movs	r0, #8
 80013da:	f000 fe83 	bl	80020e4 <HAL_Delay>
        if (currentDirection == DIR_FORWARD) {
 80013de:	4b60      	ldr	r3, [pc, #384]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <_Z13ControlSystemv+0x38>
            Pay_Out_control();
 80013e6:	f7ff fe49 	bl	800107c <_Z15Pay_Out_controlv>
        break;
 80013ea:	e0b4      	b.n	8001556 <_Z13ControlSystemv+0x1a2>
        } else if (currentDirection == DIR_REVERSE) {
 80013ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <_Z13ControlSystemv+0x46>
            Pay_In_control();
 80013f4:	f7ff fe88 	bl	8001108 <_Z14Pay_In_controlv>
        break;
 80013f8:	e0ad      	b.n	8001556 <_Z13ControlSystemv+0x1a2>
            Motor_Stop(DRUM_MOTOR_ID);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff fc7a 	bl	8000cf4 <_Z10Motor_Stoph>
            HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001400:	2008      	movs	r0, #8
 8001402:	f000 fe6f 	bl	80020e4 <HAL_Delay>
            Motor_Stop(SPOOLER_MOTOR_ID);
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff fc74 	bl	8000cf4 <_Z10Motor_Stoph>
            HAL_Delay(DELAY_BETWEEN_COMMAND);
 800140c:	2008      	movs	r0, #8
 800140e:	f000 fe69 	bl	80020e4 <HAL_Delay>
        break;
 8001412:	e0a0      	b.n	8001556 <_Z13ControlSystemv+0x1a2>
        Motor_Excitation_ON(DRUM_MOTOR_ID);
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff fab7 	bl	8000988 <_ZL19Motor_Excitation_ONh>
        HAL_Delay(DELAY_BETWEEN_COMMAND);
 800141a:	2008      	movs	r0, #8
 800141c:	f000 fe62 	bl	80020e4 <HAL_Delay>
        Motor_Excitation_ON(SPOOLER_MOTOR_ID);
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fab1 	bl	8000988 <_ZL19Motor_Excitation_ONh>
        HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001426:	2008      	movs	r0, #8
 8001428:	f000 fe5c 	bl	80020e4 <HAL_Delay>
        if (currentDirection != DIR_STOP) {
 800142c:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d07d      	beq.n	8001530 <_Z13ControlSystemv+0x17c>
            switch (currentSpeed) {
 8001434:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <_Z13ControlSystemv+0x1b0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d04a      	beq.n	80014d2 <_Z13ControlSystemv+0x11e>
 800143c:	2b02      	cmp	r3, #2
 800143e:	dc6a      	bgt.n	8001516 <_Z13ControlSystemv+0x162>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <_Z13ControlSystemv+0x96>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d022      	beq.n	800148e <_Z13ControlSystemv+0xda>
 8001448:	e065      	b.n	8001516 <_Z13ControlSystemv+0x162>
                if (currentDirection == DIR_FORWARD) {
 800144a:	4b45      	ldr	r3, [pc, #276]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <_Z13ControlSystemv+0xb8>
                    Motor_CW_Low_Speed(DRUM_MOTOR_ID);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fbae 	bl	8000bb4 <_Z18Motor_CW_Low_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001458:	2008      	movs	r0, #8
 800145a:	f000 fe43 	bl	80020e4 <HAL_Delay>
                    Motor_CW_Low_Speed(SPOOLER_MOTOR_ID);
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff fba8 	bl	8000bb4 <_Z18Motor_CW_Low_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001464:	2008      	movs	r0, #8
 8001466:	f000 fe3d 	bl	80020e4 <HAL_Delay>
                break;
 800146a:	e06e      	b.n	800154a <_Z13ControlSystemv+0x196>
                } else if (currentDirection == DIR_REVERSE) {
 800146c:	4b3c      	ldr	r3, [pc, #240]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d16a      	bne.n	800154a <_Z13ControlSystemv+0x196>
                    Motor_CCW_Low_Speed(DRUM_MOTOR_ID);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fbea 	bl	8000c4e <_Z19Motor_CCW_Low_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 800147a:	2008      	movs	r0, #8
 800147c:	f000 fe32 	bl	80020e4 <HAL_Delay>
                    Motor_CCW_Low_Speed(SPOOLER_MOTOR_ID);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fbe4 	bl	8000c4e <_Z19Motor_CCW_Low_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001486:	2008      	movs	r0, #8
 8001488:	f000 fe2c 	bl	80020e4 <HAL_Delay>
                break;
 800148c:	e05d      	b.n	800154a <_Z13ControlSystemv+0x196>
                if (currentDirection == DIR_FORWARD) {
 800148e:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <_Z13ControlSystemv+0xfc>
                    Motor_CW_Mid_Speed(DRUM_MOTOR_ID);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fba5 	bl	8000be6 <_Z18Motor_CW_Mid_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 800149c:	2008      	movs	r0, #8
 800149e:	f000 fe21 	bl	80020e4 <HAL_Delay>
                    Motor_CW_Mid_Speed(SPOOLER_MOTOR_ID);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff fb9f 	bl	8000be6 <_Z18Motor_CW_Mid_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80014a8:	2008      	movs	r0, #8
 80014aa:	f000 fe1b 	bl	80020e4 <HAL_Delay>
                break;
 80014ae:	e04e      	b.n	800154e <_Z13ControlSystemv+0x19a>
                } else if (currentDirection == DIR_REVERSE) {
 80014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d14a      	bne.n	800154e <_Z13ControlSystemv+0x19a>
                    Motor_CCW_Mid_Speed(DRUM_MOTOR_ID);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fbe3 	bl	8000c84 <_Z19Motor_CCW_Mid_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 fe10 	bl	80020e4 <HAL_Delay>
                    Motor_CCW_Mid_Speed(SPOOLER_MOTOR_ID);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff fbdd 	bl	8000c84 <_Z19Motor_CCW_Mid_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80014ca:	2008      	movs	r0, #8
 80014cc:	f000 fe0a 	bl	80020e4 <HAL_Delay>
                break;
 80014d0:	e03d      	b.n	800154e <_Z13ControlSystemv+0x19a>
                if (currentDirection == DIR_FORWARD) {
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <_Z13ControlSystemv+0x140>
                    Motor_CW_High_Speed(DRUM_MOTOR_ID);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fb9d 	bl	8000c1a <_Z19Motor_CW_High_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80014e0:	2008      	movs	r0, #8
 80014e2:	f000 fdff 	bl	80020e4 <HAL_Delay>
                    Motor_CW_High_Speed(SPOOLER_MOTOR_ID);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff fb97 	bl	8000c1a <_Z19Motor_CW_High_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 80014ec:	2008      	movs	r0, #8
 80014ee:	f000 fdf9 	bl	80020e4 <HAL_Delay>
                break;
 80014f2:	e02e      	b.n	8001552 <_Z13ControlSystemv+0x19e>
                } else if (currentDirection == DIR_REVERSE) {
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <_Z13ControlSystemv+0x1ac>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12a      	bne.n	8001552 <_Z13ControlSystemv+0x19e>
                    Motor_CCW_High_Speed(DRUM_MOTOR_ID);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fbdd 	bl	8000cbc <_Z20Motor_CCW_High_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001502:	2008      	movs	r0, #8
 8001504:	f000 fdee 	bl	80020e4 <HAL_Delay>
                    Motor_CCW_High_Speed(SPOOLER_MOTOR_ID);
 8001508:	2002      	movs	r0, #2
 800150a:	f7ff fbd7 	bl	8000cbc <_Z20Motor_CCW_High_Speedh>
                    HAL_Delay(DELAY_BETWEEN_COMMAND);
 800150e:	2008      	movs	r0, #8
 8001510:	f000 fde8 	bl	80020e4 <HAL_Delay>
                break;
 8001514:	e01d      	b.n	8001552 <_Z13ControlSystemv+0x19e>
                Motor_Excitation_OFF(DRUM_MOTOR_ID);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff fa74 	bl	8000a04 <_ZL20Motor_Excitation_OFFh>
                HAL_Delay(DELAY_BETWEEN_COMMAND);
 800151c:	2008      	movs	r0, #8
 800151e:	f000 fde1 	bl	80020e4 <HAL_Delay>
                Motor_Excitation_OFF(SPOOLER_MOTOR_ID);
 8001522:	2002      	movs	r0, #2
 8001524:	f7ff fa6e 	bl	8000a04 <_ZL20Motor_Excitation_OFFh>
                HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001528:	2008      	movs	r0, #8
 800152a:	f000 fddb 	bl	80020e4 <HAL_Delay>
                break;
 800152e:	e011      	b.n	8001554 <_Z13ControlSystemv+0x1a0>
            Motor_Stop(DRUM_MOTOR_ID);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fbdf 	bl	8000cf4 <_Z10Motor_Stoph>
            HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001536:	2008      	movs	r0, #8
 8001538:	f000 fdd4 	bl	80020e4 <HAL_Delay>
            Motor_Stop(SPOOLER_MOTOR_ID);
 800153c:	2002      	movs	r0, #2
 800153e:	f7ff fbd9 	bl	8000cf4 <_Z10Motor_Stoph>
            HAL_Delay(DELAY_BETWEEN_COMMAND);
 8001542:	2008      	movs	r0, #8
 8001544:	f000 fdce 	bl	80020e4 <HAL_Delay>
        break;
 8001548:	e004      	b.n	8001554 <_Z13ControlSystemv+0x1a0>
                break;
 800154a:	bf00      	nop
 800154c:	e002      	b.n	8001554 <_Z13ControlSystemv+0x1a0>
                break;
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <_Z13ControlSystemv+0x1a0>
                break;
 8001552:	bf00      	nop
        break;
 8001554:	bf00      	nop
    }
    
    
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000010 	.word	0x20000010
 8001560:	20000012 	.word	0x20000012
 8001564:	20000011 	.word	0x20000011

08001568 <_ZL28determine_rotation_directionl>:


// NOTE(ARUN): Determine Rotation Direction
function inline 
RotationDirection determine_rotation_direction(i32 encoder_delta)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    return (encoder_delta > 0) ? WIND_DIRECTION : UNWIND_DIRECTION;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bfd4      	ite	le
 8001576:	2301      	movle	r3, #1
 8001578:	2300      	movgt	r3, #0
 800157a:	b2db      	uxtb	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_ZL15send_cable_infov>:

// NOTE(ARUN): Data transfer to endobot app

function inline
void send_cable_info(void){
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b09f      	sub	sp, #124	@ 0x7c
 800158c:	af04      	add	r7, sp, #16
    char uart_buffer[MAX_BUFFER_SIZE];
    u16 winch_data;
    winch_data = sprintf(uart_buffer, "ENC:%ld,LEN:%.3f,SPD:%.3f\r\n", 
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <_ZL15send_cable_infov+0x58>)
 8001590:	681e      	ldr	r6, [r3, #0]
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <_ZL15send_cable_infov+0x5c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffce 	bl	8000538 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_ZL15send_cable_infov+0x60>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffc7 	bl	8000538 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4638      	mov	r0, r7
 80015b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015b4:	e9cd 4500 	strd	r4, r5, [sp]
 80015b8:	4632      	mov	r2, r6
 80015ba:	490c      	ldr	r1, [pc, #48]	@ (80015ec <_ZL15send_cable_infov+0x64>)
 80015bc:	f004 f918 	bl	80057f0 <siprintf>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                         (long)encoder_count, 
                         (float)cable_length, 
                         (float)cable_speed);
    HAL_UART_Transmit(&huart2, (u8*)uart_buffer, winch_data, HAL_MAX_DELAY);
 80015c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80015ca:	4639      	mov	r1, r7
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <_ZL15send_cable_infov+0x68>)
 80015d2:	f003 fbd5 	bl	8004d80 <HAL_UART_Transmit>
}
 80015d6:	bf00      	nop
 80015d8:	376c      	adds	r7, #108	@ 0x6c
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000c4 	.word	0x200000c4
 80015e4:	200000bc 	.word	0x200000bc
 80015e8:	200000c0 	.word	0x200000c0
 80015ec:	08006148 	.word	0x08006148
 80015f0:	200001f8 	.word	0x200001f8

080015f4 <_ZL23calculate_cable_metricsv>:


function inline 
void calculate_cable_metrics(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
    // Calculate circumference of the pulley (in meters)
    r32 pulley_circumference = (PI * PULLEY_DIAMETER) / 1000.0f;  // Convert mm to m
 80015fa:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <_ZL23calculate_cable_metricsv+0xe4>)
 80015fc:	60bb      	str	r3, [r7, #8]
    
    // Calculate distance per pulse
    r32 distance_per_pulse = pulley_circumference / ENCODER_PPR;
 80015fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001602:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80016dc <_ZL23calculate_cable_metricsv+0xe8>
 8001606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160a:	edc7 7a01 	vstr	s15, [r7, #4]
    
    // Get current encoder count
    encoder_count = __HAL_TIM_GET_COUNTER(&htim2);
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <_ZL23calculate_cable_metricsv+0xec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	461a      	mov	r2, r3
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <_ZL23calculate_cable_metricsv+0xf0>)
 8001618:	601a      	str	r2, [r3, #0]
    
    // Calculate encoder count delta
    i32 encoder_delta = encoder_count - last_encoder_count;
 800161a:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <_ZL23calculate_cable_metricsv+0xf0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <_ZL23calculate_cable_metricsv+0xf4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
    
    // Handle 16-bit timer overflow
    if (encoder_delta < -32768)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800162c:	da04      	bge.n	8001638 <_ZL23calculate_cable_metricsv+0x44>
    {
        encoder_delta += 65536;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e007      	b.n	8001648 <_ZL23calculate_cable_metricsv+0x54>
    }
    else if (encoder_delta > 32767)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800163e:	db03      	blt.n	8001648 <_ZL23calculate_cable_metricsv+0x54>
    {
        encoder_delta -= 65536;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001646:	60fb      	str	r3, [r7, #12]
    }
    
    
    current_direction = determine_rotation_direction(encoder_delta);
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff8d 	bl	8001568 <_ZL28determine_rotation_directionl>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <_ZL23calculate_cable_metricsv+0xf8>)
 8001654:	701a      	strb	r2, [r3, #0]
    
    r32 incremental_length = fabsf(encoder_delta * distance_per_pulse);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	eef0 7ae7 	vabs.f32	s15, s15
 800166c:	edc7 7a00 	vstr	s15, [r7]
    
    if (current_direction == WIND_DIRECTION) {
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <_ZL23calculate_cable_metricsv+0xf8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10a      	bne.n	800168e <_ZL23calculate_cable_metricsv+0x9a>
        
        cable_length += incremental_length;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <_ZL23calculate_cable_metricsv+0xfc>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	edd7 7a00 	vldr	s15, [r7]
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <_ZL23calculate_cable_metricsv+0xfc>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
 800168c:	e011      	b.n	80016b2 <_ZL23calculate_cable_metricsv+0xbe>
    } else {
        
        cable_length = fmaxf(0.0f, cable_length - incremental_length);
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <_ZL23calculate_cable_metricsv+0xfc>)
 8001690:	ed93 7a00 	vldr	s14, [r3]
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80016f4 <_ZL23calculate_cable_metricsv+0x100>
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f004 f86b 	bl	800577e <fmaxf>
 80016a8:	eef0 7a40 	vmov.f32	s15, s0
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <_ZL23calculate_cable_metricsv+0xfc>)
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    }
    
    cable_speed = incremental_length / (TIMER_INTERVAL_MS / 1000.0f);
 80016b2:	ed97 7a00 	vldr	s14, [r7]
 80016b6:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80016f8 <_ZL23calculate_cable_metricsv+0x104>
 80016ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <_ZL23calculate_cable_metricsv+0x108>)
 80016c0:	edc3 7a00 	vstr	s15, [r3]
    
    last_encoder_count = encoder_count;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <_ZL23calculate_cable_metricsv+0xf0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <_ZL23calculate_cable_metricsv+0xf4>)
 80016ca:	6013      	str	r3, [r2, #0]
    
    send_cable_info();
 80016cc:	f7ff ff5c 	bl	8001588 <_ZL15send_cable_infov>
    
    
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	3e20d97c 	.word	0x3e20d97c
 80016dc:	457a0000 	.word	0x457a0000
 80016e0:	20000124 	.word	0x20000124
 80016e4:	200000c4 	.word	0x200000c4
 80016e8:	200000c8 	.word	0x200000c8
 80016ec:	200000cc 	.word	0x200000cc
 80016f0:	200000bc 	.word	0x200000bc
 80016f4:	00000000 	.word	0x00000000
 80016f8:	3dcccccd 	.word	0x3dcccccd
 80016fc:	200000c0 	.word	0x200000c0

08001700 <_ZL18cable_metrics_initv>:

// NOTE(ARUN): Initialization function

function inline 
void cable_metrics_init(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
    // Initialize encoder count
    last_encoder_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <_ZL18cable_metrics_initv+0x30>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	461a      	mov	r2, r3
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <_ZL18cable_metrics_initv+0x34>)
 800170e:	601a      	str	r2, [r3, #0]
    
    // Reset metrics
    cable_length = 0.0f;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <_ZL18cable_metrics_initv+0x38>)
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    cable_speed = 0.0f;
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <_ZL18cable_metrics_initv+0x3c>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    current_direction = WIND_DIRECTION;
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <_ZL18cable_metrics_initv+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000124 	.word	0x20000124
 8001734:	200000c8 	.word	0x200000c8
 8001738:	200000bc 	.word	0x200000bc
 800173c:	200000c0 	.word	0x200000c0
 8001740:	200000cc 	.word	0x200000cc

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */
    
    /* MCU Configuration--------------------------------------------------------*/
    
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001748:	f000 fc50 	bl	8001fec <HAL_Init>
    
    /* USER CODE BEGIN Init */
    
    cable_metrics_init(); // FROM ENCODER_H
 800174c:	f7ff ffd8 	bl	8001700 <_ZL18cable_metrics_initv>
    
    /* USER CODE END Init */
    
    /* Configure the system clock */
    SystemClock_Config();
 8001750:	f000 f81c 	bl	800178c <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */
    
    /* USER CODE END SysInit */
    
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001754:	f000 f98e 	bl	8001a74 <_ZL12MX_GPIO_Initv>
    MX_USART2_UART_Init();
 8001758:	f000 f958 	bl	8001a0c <_ZL19MX_USART2_UART_Initv>
    MX_I2C3_Init();
 800175c:	f000 f876 	bl	800184c <_ZL12MX_I2C3_Initv>
    MX_TIM2_Init();
 8001760:	f000 f8c2 	bl	80018e8 <_ZL12MX_TIM2_Initv>
    MX_USART1_UART_Init();
 8001764:	f000 f91e 	bl	80019a4 <_ZL19MX_USART1_UART_Initv>
    
    
    /* USER CODE BEGIN 2 */
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);   //encoder.h
 8001768:	213c      	movs	r1, #60	@ 0x3c
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <main+0x44>)
 800176c:	f003 f930 	bl	80049d0 <HAL_TIM_Encoder_Start>
    while (1)
    {
        /* USER CODE END WHILE */
        
        /* USER CODE BEGIN 3 */
        UpdateOperationMode();
 8001770:	f7ff fd8c 	bl	800128c <_Z19UpdateOperationModev>
        UpdateManualControls();
 8001774:	f7ff fda2 	bl	80012bc <_Z20UpdateManualControlsv>
        UpdateAutoControls();
 8001778:	f7ff fdec 	bl	8001354 <_Z18UpdateAutoControlsv>
        ControlSystem();
 800177c:	f7ff fe1a 	bl	80013b4 <_Z13ControlSystemv>
        calculate_cable_metrics();
 8001780:	f7ff ff38 	bl	80015f4 <_ZL23calculate_cable_metricsv>
        UpdateOperationMode();
 8001784:	bf00      	nop
 8001786:	e7f3      	b.n	8001770 <main+0x2c>
 8001788:	20000124 	.word	0x20000124

0800178c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	@ 0x58
 8001790:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2244      	movs	r2, #68	@ 0x44
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f004 f848 	bl	8005830 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
    
    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017b2:	f001 fe9d 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_Z18SystemClock_Configv+0x3e>
    {
        Error_Handler();
 80017c6:	f000 f9fb 	bl	8001bc0 <Error_Handler>
    }
    
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d4:	2310      	movs	r3, #16
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d8:	2302      	movs	r3, #2
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 80017e0:	2301      	movs	r3, #1
 80017e2:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 80017e4:	230a      	movs	r3, #10
 80017e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017e8:	2307      	movs	r3, #7
 80017ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fecf 	bl	800359c <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <_Z18SystemClock_Configv+0x86>
    {
        Error_Handler();
 800180e:	f000 f9d7 	bl	8001bc0 <Error_Handler>
    }
    
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	603b      	str	r3, [r7, #0]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	2104      	movs	r1, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f002 faca 	bl	8003dc4 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <_Z18SystemClock_Configv+0xb8>
    {
        Error_Handler();
 8001840:	f000 f9be 	bl	8001bc0 <Error_Handler>
    }
}
 8001844:	bf00      	nop
 8001846:	3758      	adds	r7, #88	@ 0x58
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */
    
    /* USER CODE BEGIN I2C3_Init 1 */
    
    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8001850:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001852:	4a23      	ldr	r2, [pc, #140]	@ (80018e0 <_ZL12MX_I2C3_Initv+0x94>)
 8001854:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x00F12981;
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001858:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <_ZL12MX_I2C3_Initv+0x98>)
 800185a:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0;
 800185c:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001864:	2201      	movs	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0;
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001880:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001886:	4815      	ldr	r0, [pc, #84]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 8001888:	f000 fee0 	bl	800264c <HAL_I2C_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_ZL12MX_I2C3_Initv+0x54>
    {
        Error_Handler();
 800189c:	f000 f990 	bl	8001bc0 <Error_Handler>
    }
    
    /** Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a0:	2100      	movs	r1, #0
 80018a2:	480e      	ldr	r0, [pc, #56]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 80018a4:	f001 fd0e 	bl	80032c4 <HAL_I2CEx_ConfigAnalogFilter>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <_ZL12MX_I2C3_Initv+0x70>
    {
        Error_Handler();
 80018b8:	f000 f982 	bl	8001bc0 <Error_Handler>
    }
    
    /** Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4807      	ldr	r0, [pc, #28]	@ (80018dc <_ZL12MX_I2C3_Initv+0x90>)
 80018c0:	f001 fd4b 	bl	800335a <HAL_I2CEx_ConfigDigitalFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <_ZL12MX_I2C3_Initv+0x8c>
    {
        Error_Handler();
 80018d4:	f000 f974 	bl	8001bc0 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */
    
    /* USER CODE END I2C3_Init 2 */
    
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000d0 	.word	0x200000d0
 80018e0:	40005c00 	.word	0x40005c00
 80018e4:	00f12981 	.word	0x00f12981

080018e8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0
    
    /* USER CODE BEGIN TIM2_Init 0 */
    
    /* USER CODE END TIM2_Init 0 */
    
    TIM_Encoder_InitTypeDef sConfig = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2224      	movs	r2, #36	@ 0x24
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 ff9a 	bl	8005830 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
    
    /* USER CODE BEGIN TIM2_Init 1 */
    
    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 8001908:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190c:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 4294967295;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800192e:	2303      	movs	r3, #3
 8001930:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001936:	2301      	movs	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 5;
 800193e:	2305      	movs	r3, #5
 8001940:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4619      	mov	r1, r3
 8001958:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 800195a:	f002 ff93 	bl	8004884 <HAL_TIM_Encoder_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <_ZL12MX_TIM2_Initv+0x8a>
    {
        Error_Handler();
 800196e:	f000 f927 	bl	8001bc0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <_ZL12MX_TIM2_Initv+0xb8>)
 8001980:	f003 f94a 	bl	8004c18 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <_ZL12MX_TIM2_Initv+0xb0>
    {
        Error_Handler();
 8001994:	f000 f914 	bl	8001bc0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */
    
    /* USER CODE END TIM2_Init 2 */
    
}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000124 	.word	0x20000124

080019a4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */
    
    /* USER CODE BEGIN USART1_Init 1 */
    
    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <_ZL19MX_USART1_UART_Initv+0x64>)
 80019ac:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019e8:	f003 f97c 	bl	8004ce4 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <_ZL19MX_USART1_UART_Initv+0x5c>
    {
        Error_Handler();
 80019fc:	f000 f8e0 	bl	8001bc0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */
    
    /* USER CODE END USART1_Init 2 */
    
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000170 	.word	0x20000170
 8001a08:	40013800 	.word	0x40013800

08001a0c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */
    
    /* USER CODE BEGIN USART2_Init 1 */
    
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001a14:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001a50:	f003 f948 	bl	8004ce4 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8001a64:	f000 f8ac 	bl	8001bc0 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    
    /* USER CODE END USART2_Init 2 */
    
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001f8 	.word	0x200001f8
 8001a70:	40004400 	.word	0x40004400

08001a74 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */
    
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b46      	ldr	r3, [pc, #280]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a42      	ldr	r2, [pc, #264]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a36      	ldr	r2, [pc, #216]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	21b0      	movs	r1, #176	@ 0xb0
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f000 fd93 	bl	800261c <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001afc:	482d      	ldr	r0, [pc, #180]	@ (8001bb4 <_ZL12MX_GPIO_Initv+0x140>)
 8001afe:	f000 fd8d 	bl	800261c <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4827      	ldr	r0, [pc, #156]	@ (8001bb8 <_ZL12MX_GPIO_Initv+0x144>)
 8001b1a:	f000 fbed 	bl	80022f8 <HAL_GPIO_Init>
    
    /*Configure GPIO pins : CW_IN_Pin CCW_IN_Pin SPEED_HIGH_IN_Pin MODE_IN_Pin
                             SPEED_LOW_IN_Pin */
    GPIO_InitStruct.Pin = CW_IN_Pin|CCW_IN_Pin|SPEED_HIGH_IN_Pin|MODE_IN_Pin
 8001b1e:	f641 430c 	movw	r3, #7180	@ 0x1c0c
 8001b22:	617b      	str	r3, [r7, #20]
        |SPEED_LOW_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4821      	ldr	r0, [pc, #132]	@ (8001bb8 <_ZL12MX_GPIO_Initv+0x144>)
 8001b34:	f000 fbe0 	bl	80022f8 <HAL_GPIO_Init>
    
    /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
    GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001b38:	23b0      	movs	r3, #176	@ 0xb0
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b52:	f000 fbd1 	bl	80022f8 <HAL_GPIO_Init>
    
    /*Configure GPIO pin : SMPS_PG_Pin */
    GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001b56:	2340      	movs	r3, #64	@ 0x40
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6c:	f000 fbc4 	bl	80022f8 <HAL_GPIO_Init>
    
    /*Configure GPIO pin : LD4_Pin */
    GPIO_InitStruct.Pin = LD4_Pin;
 8001b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <_ZL12MX_GPIO_Initv+0x140>)
 8001b8a:	f000 fbb5 	bl	80022f8 <HAL_GPIO_Init>
    
    /*Configure GPIO pin : PH3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <_ZL12MX_GPIO_Initv+0x148>)
 8001ba2:	f000 fba9 	bl	80022f8 <HAL_GPIO_Init>
    
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48001c00 	.word	0x48001c00

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <Error_Handler+0x8>

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_MspInit+0x60>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_MspInit+0x60>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_MspInit+0x60>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_MspInit+0x60>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_MspInit+0x60>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_MspInit+0x60>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_EVENT_FALLING;
 8001c10:	f04f 1302 	mov.w	r3, #131074	@ 0x20002
 8001c14:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fbea 	bl	80033f4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001c20:	f001 fc48 	bl	80034b4 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a2      	sub	sp, #136	@ 0x88
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2260      	movs	r2, #96	@ 0x60
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fded 	bl	8005830 <memset>
  if(hi2c->Instance==I2C3)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a20      	ldr	r2, [pc, #128]	@ (8001cdc <HAL_I2C_MspInit+0xac>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d138      	bne.n	8001cd2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 facc 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c7a:	f7ff ffa1 	bl	8001bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c96:	2303      	movs	r3, #3
 8001c98:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480b      	ldr	r0, [pc, #44]	@ (8001ce4 <HAL_I2C_MspInit+0xb4>)
 8001cb6:	f000 fb1f 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	4a08      	ldr	r2, [pc, #32]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001cc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_I2C_MspInit+0xb0>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3788      	adds	r7, #136	@ 0x88
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40005c00 	.word	0x40005c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	48000800 	.word	0x48000800

08001ce8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d08:	d128      	bne.n	8001d5c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f000 face 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b0a4      	sub	sp, #144	@ 0x90
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2260      	movs	r2, #96	@ 0x60
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fd51 	bl	8005830 <memset>
  if(huart->Instance==USART1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a42      	ldr	r2, [pc, #264]	@ (8001e9c <HAL_UART_MspInit+0x134>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d13c      	bne.n	8001e12 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fa31 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001db0:	f7ff ff06 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db8:	4a39      	ldr	r2, [pc, #228]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b34      	ldr	r3, [pc, #208]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	4a33      	ldr	r2, [pc, #204]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd8:	4b31      	ldr	r3, [pc, #196]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0c:	f000 fa74 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e10:	e03f      	b.n	8001e92 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_UART_MspInit+0x13c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d13a      	bne.n	8001e92 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 f9ef 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001e34:	f7ff fec4 	bl	8001bc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e54:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_UART_MspInit+0x138>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e7e:	2307      	movs	r3, #7
 8001e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8e:	f000 fa33 	bl	80022f8 <HAL_GPIO_Init>
}
 8001e92:	bf00      	nop
 8001e94:	3790      	adds	r7, #144	@ 0x90
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <NMI_Handler+0x4>

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <MemManage_Handler+0x4>

08001ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f8d1 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f003 fc82 	bl	8005840 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000c000 	.word	0x2000c000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000280 	.word	0x20000280
 8001f70:	200003d0 	.word	0x200003d0

08001f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f9c:	f7ff ffea 	bl	8001f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	@ (8001fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <LoopForever+0xe>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe4 <LoopForever+0x16>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f003 fc41 	bl	800584c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fca:	f7ff fbbb 	bl	8001744 <main>

08001fce <LoopForever>:

LoopForever:
    b LoopForever
 8001fce:	e7fe      	b.n	8001fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fdc:	080061f0 	.word	0x080061f0
  ldr r2, =_sbss
 8001fe0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fe4:	200003d0 	.word	0x200003d0

08001fe8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC1_IRQHandler>
	...

08001fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_Init+0x3c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_Init+0x3c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002002:	2003      	movs	r0, #3
 8002004:	f000 f944 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002008:	2000      	movs	r0, #0
 800200a:	f000 f80f 	bl	800202c <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	e001      	b.n	800201e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800201a:	f7ff fdd7 	bl	8001bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800201e:	79fb      	ldrb	r3, [r7, #7]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_InitTick+0x6c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002040:	4b16      	ldr	r3, [pc, #88]	@ (800209c <HAL_InitTick+0x70>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_InitTick+0x6c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f941 	bl	80022de <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d809      	bhi.n	800207c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 f919 	bl	80022a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_InitTick+0x74>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e007      	b.n	800208c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e004      	b.n	800208c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e001      	b.n	800208c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000001c 	.word	0x2000001c
 800209c:	20000014 	.word	0x20000014
 80020a0:	20000018 	.word	0x20000018

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000001c 	.word	0x2000001c
 80020c8:	20000284 	.word	0x20000284

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000284 	.word	0x20000284

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffee 	bl	80020cc <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffde 	bl	80020cc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000001c 	.word	0x2000001c

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	@ (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff47 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff5c 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffb0 	bl	800224c <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	e154      	b.n	80025b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8146 	beq.w	80025ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_GPIO_Init+0x40>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d130      	bne.n	800239a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236e:	2201      	movs	r2, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 0201 	and.w	r2, r3, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d123      	bne.n	800242a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	6939      	ldr	r1, [r7, #16]
 8002426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80a0 	beq.w	80025ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246c:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <HAL_GPIO_Init+0x2d8>)
 800246e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002470:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_GPIO_Init+0x2d8>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6613      	str	r3, [r2, #96]	@ 0x60
 8002478:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <HAL_GPIO_Init+0x2d8>)
 800247a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002484:	4a53      	ldr	r2, [pc, #332]	@ (80025d4 <HAL_GPIO_Init+0x2dc>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024ae:	d019      	beq.n	80024e4 <HAL_GPIO_Init+0x1ec>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <HAL_GPIO_Init+0x2e0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_GPIO_Init+0x1e8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a48      	ldr	r2, [pc, #288]	@ (80025dc <HAL_GPIO_Init+0x2e4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00d      	beq.n	80024dc <HAL_GPIO_Init+0x1e4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a47      	ldr	r2, [pc, #284]	@ (80025e0 <HAL_GPIO_Init+0x2e8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x1e0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a46      	ldr	r2, [pc, #280]	@ (80025e4 <HAL_GPIO_Init+0x2ec>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_GPIO_Init+0x1dc>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e008      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024d4:	2307      	movs	r3, #7
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024d8:	2303      	movs	r3, #3
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024dc:	2302      	movs	r3, #2
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e4:	2300      	movs	r3, #0
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f6:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_GPIO_Init+0x2dc>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002528:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252e:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002552:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002558:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257c:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a6:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f aea3 	bne.w	8002308 <HAL_GPIO_Init+0x10>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	48000c00 	.word	0x48000c00
 80025e4:	48001000 	.word	0x48001000
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002638:	e002      	b.n	8002640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08d      	b.n	800277a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fadc 	bl	8001c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	@ 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800269c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d108      	bne.n	80026ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e007      	b.n	80026fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800270c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	460b      	mov	r3, r1
 8002792:	817b      	strh	r3, [r7, #10]
 8002794:	4613      	mov	r3, r2
 8002796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 80fd 	bne.w	80029a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_I2C_Master_Transmit+0x30>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0f6      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027bc:	f7ff fc86 	bl	80020cc <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2319      	movs	r3, #25
 80027c8:	2201      	movs	r2, #1
 80027ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 faf6 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e1      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2221      	movs	r2, #33	@ 0x21
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2210      	movs	r2, #16
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	893a      	ldrh	r2, [r7, #8]
 80027fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2bff      	cmp	r3, #255	@ 0xff
 800280e:	d906      	bls.n	800281e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	22ff      	movs	r2, #255	@ 0xff
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e007      	b.n	800282e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800282c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d024      	beq.n	8002880 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_I2C_Master_Transmit+0x228>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fcf1 	bl	8003260 <I2C_TransferConfig>
 800287e:	e066      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	b2da      	uxtb	r2, r3
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_I2C_Master_Transmit+0x228>)
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fce6 	bl	8003260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002894:	e05b      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	6a39      	ldr	r1, [r7, #32]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fae9 	bl	8002e72 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07b      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d034      	beq.n	800294e <HAL_I2C_Master_Transmit+0x1ca>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d130      	bne.n	800294e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa62 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e04d      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	2bff      	cmp	r3, #255	@ 0xff
 800290e:	d90e      	bls.n	800292e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	22ff      	movs	r2, #255	@ 0xff
 8002914:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fc9a 	bl	8003260 <I2C_TransferConfig>
 800292c:	e00f      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293c:	b2da      	uxtb	r2, r3
 800293e:	8979      	ldrh	r1, [r7, #10]
 8002940:	2300      	movs	r3, #0
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fc89 	bl	8003260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d19e      	bne.n	8002896 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 facf 	bl	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e01a      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2220      	movs	r2, #32
 8002972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <HAL_I2C_Master_Transmit+0x22c>)
 8002980:	400b      	ands	r3, r1
 8002982:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	80002000 	.word	0x80002000
 80029b0:	fe00e800 	.word	0xfe00e800

080029b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	460b      	mov	r3, r1
 80029c2:	817b      	strh	r3, [r7, #10]
 80029c4:	4613      	mov	r3, r2
 80029c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	f040 80db 	bne.w	8002b8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_I2C_Master_Receive+0x30>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0d4      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ec:	f7ff fb6e 	bl	80020cc <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2319      	movs	r3, #25
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9de 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0bf      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2222      	movs	r2, #34	@ 0x22
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2bff      	cmp	r3, #255	@ 0xff
 8002a3e:	d90e      	bls.n	8002a5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_I2C_Master_Receive+0x1e4>)
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fc02 	bl	8003260 <I2C_TransferConfig>
 8002a5c:	e06d      	b.n	8002b3a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_I2C_Master_Receive+0x1e4>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fbf1 	bl	8003260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a7e:	e05c      	b.n	8002b3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6a39      	ldr	r1, [r7, #32]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa7f 	bl	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e07c      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d034      	beq.n	8002b3a <HAL_I2C_Master_Receive+0x186>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d130      	bne.n	8002b3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2180      	movs	r1, #128	@ 0x80
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f96c 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e04d      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2bff      	cmp	r3, #255	@ 0xff
 8002afa:	d90e      	bls.n	8002b1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	22ff      	movs	r2, #255	@ 0xff
 8002b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fba4 	bl	8003260 <I2C_TransferConfig>
 8002b18:	e00f      	b.n	8002b3a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb93 	bl	8003260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d19d      	bne.n	8002a80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	6a39      	ldr	r1, [r7, #32]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f9d9 	bl	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e01a      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <HAL_I2C_Master_Receive+0x1e8>)
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	80002400 	.word	0x80002400
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	460b      	mov	r3, r1
 8002bae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 80d6 	bne.w	8002d6e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0cc      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2C_IsDeviceReady+0x44>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0c5      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2224      	movs	r2, #36	@ 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_IsDeviceReady+0x72>
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c10:	e006      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x80>
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c26:	f7ff fa51 	bl	80020cc <HAL_GetTick>
 8002c2a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c58:	e034      	b.n	8002cc4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d01a      	beq.n	8002c98 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7ff fa33 	bl	80020cc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <HAL_I2C_IsDeviceReady+0xd8>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10f      	bne.n	8002c98 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e06b      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_I2C_IsDeviceReady+0x130>
 8002cca:	7fbb      	ldrb	r3, [r7, #30]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0c4      	beq.n	8002c5a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d01a      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f869 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e03b      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e02d      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f84e 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f63f af56 	bhi.w	8002bfa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d007      	beq.n	8002db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	619a      	str	r2, [r3, #24]
  }
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd0:	e03b      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f962 	bl	80030a0 <I2C_IsErrorOccurred>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d02d      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7ff f96d 	bl	80020cc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d122      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d113      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f043 0220 	orr.w	r2, r3, #32
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d0b4      	beq.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e7e:	e033      	b.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f90b 	bl	80030a0 <I2C_IsErrorOccurred>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e031      	b.n	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d025      	beq.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7ff f916 	bl	80020cc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11a      	bne.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d013      	beq.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d1c4      	bne.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0c:	e02f      	b.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8c4 	bl	80030a0 <I2C_IsErrorOccurred>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e02d      	b.n	8002f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7ff f8d3 	bl	80020cc <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11a      	bne.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d013      	beq.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e007      	b.n	8002f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d1c8      	bne.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f98:	e071      	b.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f87e 	bl	80030a0 <I2C_IsErrorOccurred>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d13b      	bne.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d138      	bne.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d105      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d121      	bne.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800300c:	400b      	ands	r3, r1
 800300e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
 800302c:	e002      	b.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003034:	f7ff f84a 	bl	80020cc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d119      	bne.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d116      	bne.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d00f      	beq.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d002      	beq.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d083      	beq.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fe00e800 	.word	0xfe00e800

080030a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d068      	beq.n	800319e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d4:	e049      	b.n	800316a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d045      	beq.n	800316a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fff5 	bl	80020cc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_IsErrorOccurred+0x54>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13a      	bne.n	800316a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003116:	d121      	bne.n	800315c <I2C_IsErrorOccurred+0xbc>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800311e:	d01d      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b20      	cmp	r3, #32
 8003124:	d01a      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003136:	f7fe ffc9 	bl	80020cc <HAL_GetTick>
 800313a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313c:	e00e      	b.n	800315c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800313e:	f7fe ffc5 	bl	80020cc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b19      	cmp	r3, #25
 800314a:	d907      	bls.n	800315c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0320 	orr.w	r3, r3, #32
 8003152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800315a:	e006      	b.n	800316a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d1e9      	bne.n	800313e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d003      	beq.n	8003180 <I2C_IsErrorOccurred+0xe0>
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0aa      	beq.n	80030d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01c      	beq.n	800324e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fdaf 	bl	8002d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <I2C_IsErrorOccurred+0x1bc>)
 8003226:	400b      	ands	r3, r1
 8003228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003252:	4618      	mov	r0, r3
 8003254:	3728      	adds	r7, #40	@ 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	4613      	mov	r3, r2
 8003270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003278:	7a7b      	ldrb	r3, [r7, #9]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	4313      	orrs	r3, r2
 800328a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	0d5b      	lsrs	r3, r3, #21
 800329a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <I2C_TransferConfig+0x60>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	43db      	mvns	r3, r3
 80032a4:	ea02 0103 	and.w	r1, r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	03ff63ff 	.word	0x03ff63ff

080032c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d138      	bne.n	800334c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e032      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	@ 0x24
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d139      	bne.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800337a:	2302      	movs	r3, #2
 800337c:	e033      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2224      	movs	r2, #36	@ 0x24
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80033fc:	4b2b      	ldr	r3, [pc, #172]	@ (80034ac <HAL_PWR_ConfigPVD+0xb8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 020e 	bic.w	r2, r3, #14
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4928      	ldr	r1, [pc, #160]	@ (80034ac <HAL_PWR_ConfigPVD+0xb8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800340e:	4b28      	ldr	r3, [pc, #160]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a27      	ldr	r2, [pc, #156]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003418:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800341a:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003426:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4a21      	ldr	r2, [pc, #132]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003430:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003432:	4b1f      	ldr	r3, [pc, #124]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800344a:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003462:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4a0c      	ldr	r2, [pc, #48]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <HAL_PWR_ConfigPVD+0xbc>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40007000 	.word	0x40007000
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <HAL_PWR_EnablePVD+0x1c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <HAL_PWR_EnablePVD+0x1c>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6053      	str	r3, [r2, #4]
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40007000 	.word	0x40007000

080034d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_PWREx_GetVoltageRange+0x18>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40007000 	.word	0x40007000

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fe:	d130      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003500:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800350c:	d038      	beq.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003516:	4a1e      	ldr	r2, [pc, #120]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800351c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800351e:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2232      	movs	r2, #50	@ 0x32
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	4a1b      	ldr	r2, [pc, #108]	@ (8003598 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003534:	e002      	b.n	800353c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003548:	d102      	bne.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x60>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f2      	bne.n	8003536 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d110      	bne.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356e:	d007      	beq.n	8003580 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003578:	4a05      	ldr	r2, [pc, #20]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800357e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40007000 	.word	0x40007000
 8003594:	20000014 	.word	0x20000014
 8003598:	431bde83 	.word	0x431bde83

0800359c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f000 bc02 	b.w	8003db4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b0:	4b96      	ldr	r3, [pc, #600]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ba:	4b94      	ldr	r3, [pc, #592]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80e4 	beq.w	800379a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4c>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	f040 808b 	bne.w	80036f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 8087 	bne.w	80036f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e8:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x64>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e3d9      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	4b81      	ldr	r3, [pc, #516]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_RCC_OscConfig+0x7e>
 8003610:	4b7e      	ldr	r3, [pc, #504]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003618:	e005      	b.n	8003626 <HAL_RCC_OscConfig+0x8a>
 800361a:	4b7c      	ldr	r3, [pc, #496]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800361c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003626:	4293      	cmp	r3, r2
 8003628:	d223      	bcs.n	8003672 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fd8c 	bl	800414c <RCC_SetFlashLatencyFromMSIRange>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e3ba      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363e:	4b73      	ldr	r3, [pc, #460]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a72      	ldr	r2, [pc, #456]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b70      	ldr	r3, [pc, #448]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	496d      	ldr	r1, [pc, #436]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800365c:	4b6b      	ldr	r3, [pc, #428]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4968      	ldr	r1, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	e025      	b.n	80036be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003672:	4b66      	ldr	r3, [pc, #408]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a65      	ldr	r2, [pc, #404]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003678:	f043 0308 	orr.w	r3, r3, #8
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b63      	ldr	r3, [pc, #396]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4960      	ldr	r1, [pc, #384]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003690:	4b5e      	ldr	r3, [pc, #376]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	495b      	ldr	r1, [pc, #364]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd4c 	bl	800414c <RCC_SetFlashLatencyFromMSIRange>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e37a      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036be:	f000 fc81 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b51      	ldr	r3, [pc, #324]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4950      	ldr	r1, [pc, #320]	@ (8003810 <HAL_RCC_OscConfig+0x274>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	4a4e      	ldr	r2, [pc, #312]	@ (8003814 <HAL_RCC_OscConfig+0x278>)
 80036dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036de:	4b4e      	ldr	r3, [pc, #312]	@ (8003818 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fca2 	bl	800202c <HAL_InitTick>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d052      	beq.n	8003798 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	e35e      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d032      	beq.n	8003764 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036fe:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a42      	ldr	r2, [pc, #264]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800370a:	f7fe fcdf 	bl	80020cc <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003712:	f7fe fcdb 	bl	80020cc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e347      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003724:	4b39      	ldr	r3, [pc, #228]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003730:	4b36      	ldr	r3, [pc, #216]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a35      	ldr	r2, [pc, #212]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b33      	ldr	r3, [pc, #204]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4930      	ldr	r1, [pc, #192]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374e:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	492b      	ldr	r1, [pc, #172]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	e01a      	b.n	800379a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003764:	4b29      	ldr	r3, [pc, #164]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003770:	f7fe fcac 	bl	80020cc <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003778:	f7fe fca8 	bl	80020cc <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e314      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800378a:	4b20      	ldr	r3, [pc, #128]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1dc>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d073      	beq.n	800388e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x21c>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d10e      	bne.n	80037d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d10b      	bne.n	80037d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d063      	beq.n	800388c <HAL_RCC_OscConfig+0x2f0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d15f      	bne.n	800388c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e2f1      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d8:	d106      	bne.n	80037e8 <HAL_RCC_OscConfig+0x24c>
 80037da:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a0b      	ldr	r2, [pc, #44]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e025      	b.n	8003834 <HAL_RCC_OscConfig+0x298>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f0:	d114      	bne.n	800381c <HAL_RCC_OscConfig+0x280>
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a05      	ldr	r2, [pc, #20]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a02      	ldr	r2, [pc, #8]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e013      	b.n	8003834 <HAL_RCC_OscConfig+0x298>
 800380c:	40021000 	.word	0x40021000
 8003810:	08006164 	.word	0x08006164
 8003814:	20000014 	.word	0x20000014
 8003818:	20000018 	.word	0x20000018
 800381c:	4ba0      	ldr	r3, [pc, #640]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a9f      	ldr	r2, [pc, #636]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b9d      	ldr	r3, [pc, #628]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a9c      	ldr	r2, [pc, #624]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800382e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fc46 	bl	80020cc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe fc42 	bl	80020cc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	@ 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e2ae      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003856:	4b92      	ldr	r3, [pc, #584]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x2a8>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fc32 	bl	80020cc <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe fc2e 	bl	80020cc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	@ 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e29a      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387e:	4b88      	ldr	r3, [pc, #544]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x2d0>
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d060      	beq.n	800395c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d005      	beq.n	80038ac <HAL_RCC_OscConfig+0x310>
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d119      	bne.n	80038da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d116      	bne.n	80038da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x328>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e277      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b76      	ldr	r3, [pc, #472]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	4973      	ldr	r1, [pc, #460]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	e040      	b.n	800395c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d023      	beq.n	800392a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e2:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fe fbed 	bl	80020cc <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fe fbe9 	bl	80020cc <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e255      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003908:	4b65      	ldr	r3, [pc, #404]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b62      	ldr	r3, [pc, #392]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	495f      	ldr	r1, [pc, #380]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	e018      	b.n	800395c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fbc9 	bl	80020cc <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fbc5 	bl	80020cc <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e231      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003950:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d03c      	beq.n	80039e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01c      	beq.n	80039aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003970:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003976:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe fba4 	bl	80020cc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe fba0 	bl	80020cc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e20c      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399a:	4b41      	ldr	r3, [pc, #260]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 800399c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <HAL_RCC_OscConfig+0x3ec>
 80039a8:	e01b      	b.n	80039e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039aa:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b0:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe fb87 	bl	80020cc <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe fb83 	bl	80020cc <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1ef      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d4:	4b32      	ldr	r3, [pc, #200]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ef      	bne.n	80039c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a6 	beq.w	8003b3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039f4:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	4a26      	ldr	r2, [pc, #152]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0c:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <HAL_RCC_OscConfig+0x508>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d118      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_RCC_OscConfig+0x508>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <HAL_RCC_OscConfig+0x508>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a34:	f7fe fb4a 	bl	80020cc <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fb46 	bl	80020cc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1b2      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_RCC_OscConfig+0x508>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4d8>
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a72:	e029      	b.n	8003ac8 <HAL_RCC_OscConfig+0x52c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x50c>
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a07      	ldr	r2, [pc, #28]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	4a03      	ldr	r2, [pc, #12]	@ (8003aa0 <HAL_RCC_OscConfig+0x504>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x52c>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	4b9a      	ldr	r3, [pc, #616]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a99      	ldr	r2, [pc, #612]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab8:	4b96      	ldr	r3, [pc, #600]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a95      	ldr	r2, [pc, #596]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d016      	beq.n	8003afe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fafc 	bl	80020cc <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fe faf8 	bl	80020cc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e162      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	4b89      	ldr	r3, [pc, #548]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ed      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x53c>
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fae5 	bl	80020cc <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe fae1 	bl	80020cc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e14b      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1c:	4b7d      	ldr	r3, [pc, #500]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ed      	bne.n	8003b06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b78      	ldr	r3, [pc, #480]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	4a77      	ldr	r2, [pc, #476]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b50:	4b70      	ldr	r3, [pc, #448]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b56:	4a6f      	ldr	r2, [pc, #444]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fe fab4 	bl	80020cc <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b68:	f7fe fab0 	bl	80020cc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e11c      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b7a:	4b66      	ldr	r3, [pc, #408]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <HAL_RCC_OscConfig+0x5cc>
 8003b88:	e01b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b8a:	4b62      	ldr	r3, [pc, #392]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b90:	4a60      	ldr	r2, [pc, #384]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fa97 	bl	80020cc <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba2:	f7fe fa93 	bl	80020cc <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0ff      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb4:	4b57      	ldr	r3, [pc, #348]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ef      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80f3 	beq.w	8003db2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	f040 80c9 	bne.w	8003d68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d12c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d123      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d11b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d113      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d06b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d062      	beq.n	8003d10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c4a:	4b32      	ldr	r3, [pc, #200]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0ac      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c66:	f7fe fa31 	bl	80020cc <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6e:	f7fe fa2d 	bl	80020cc <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e099      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c80:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <HAL_RCC_OscConfig+0x77c>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ca6:	0212      	lsls	r2, r2, #8
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cae:	0852      	lsrs	r2, r2, #1
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0552      	lsls	r2, r2, #21
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0652      	lsls	r2, r2, #25
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cc6:	06d2      	lsls	r2, r2, #27
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	4912      	ldr	r1, [pc, #72]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce8:	f7fe f9f0 	bl	80020cc <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fe f9ec 	bl	80020cc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e058      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <HAL_RCC_OscConfig+0x778>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0e:	e050      	b.n	8003db2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e04f      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d144      	bne.n	8003db2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d28:	4b24      	ldr	r3, [pc, #144]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d34:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d40:	f7fe f9c4 	bl	80020cc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe f9c0 	bl	80020cc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e02c      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5a:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x7ac>
 8003d66:	e024      	b.n	8003db2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d01f      	beq.n	8003dae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a12      	ldr	r2, [pc, #72]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fe f9a7 	bl	80020cc <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe f9a3 	bl	80020cc <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e00f      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4905      	ldr	r1, [pc, #20]	@ (8003dbc <HAL_RCC_OscConfig+0x820>)
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_RCC_OscConfig+0x824>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
 8003dac:	e001      	b.n	8003db2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	feeefffc 	.word	0xfeeefffc

08003dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0e7      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b75      	ldr	r3, [pc, #468]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b72      	ldr	r3, [pc, #456]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0207 	bic.w	r2, r3, #7
 8003dee:	4970      	ldr	r1, [pc, #448]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cf      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	4b66      	ldr	r3, [pc, #408]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b63      	ldr	r3, [pc, #396]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4960      	ldr	r1, [pc, #384]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d04c      	beq.n	8003edc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0a6      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e62:	4b54      	ldr	r3, [pc, #336]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e09a      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e08e      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e086      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b46      	ldr	r3, [pc, #280]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4943      	ldr	r1, [pc, #268]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fe f90e 	bl	80020cc <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fe f90a 	bl	80020cc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e06e      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b31      	ldr	r3, [pc, #196]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d208      	bcs.n	8003f0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	492b      	ldr	r1, [pc, #172]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0a:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d210      	bcs.n	8003f3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f18:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	4923      	ldr	r1, [pc, #140]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f28:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e036      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f46:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4918      	ldr	r1, [pc, #96]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4910      	ldr	r1, [pc, #64]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f78:	f000 f824 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	490b      	ldr	r1, [pc, #44]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1f8>)
 8003f96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1fc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe f845 	bl	800202c <HAL_InitTick>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08006164 	.word	0x08006164
 8003fbc:	20000014 	.word	0x20000014
 8003fc0:	20000018 	.word	0x20000018

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d121      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d11e      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ff8:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004004:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e005      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004020:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004028:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004034:	e00a      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d102      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	e004      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d101      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004048:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800404a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d134      	bne.n	80040bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004052:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0xa6>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b03      	cmp	r3, #3
 8004066:	d003      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0xac>
 8004068:	e005      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800406c:	617b      	str	r3, [r7, #20]
      break;
 800406e:	e005      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004072:	617b      	str	r3, [r7, #20]
      break;
 8004074:	e002      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	617b      	str	r3, [r7, #20]
      break;
 800407a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	3301      	adds	r3, #1
 8004088:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800408a:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	fb03 f202 	mul.w	r2, r3, r2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	0e5b      	lsrs	r3, r3, #25
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	3301      	adds	r3, #1
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040bc:	69bb      	ldr	r3, [r7, #24]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3724      	adds	r7, #36	@ 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800617c 	.word	0x0800617c
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	007a1200 	.word	0x007a1200

080040dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000014 	.word	0x20000014

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4904      	ldr	r1, [pc, #16]	@ (800411c <HAL_RCC_GetPCLK1Freq+0x28>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	08006174 	.word	0x08006174

08004120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004124:	f7ff ffda 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0adb      	lsrs	r3, r3, #11
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4904      	ldr	r1, [pc, #16]	@ (8004148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	08006174 	.word	0x08006174

0800414c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004158:	4b2a      	ldr	r3, [pc, #168]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004164:	f7ff f9b6 	bl	80034d4 <HAL_PWREx_GetVoltageRange>
 8004168:	6178      	str	r0, [r7, #20]
 800416a:	e014      	b.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b25      	ldr	r3, [pc, #148]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	4a24      	ldr	r2, [pc, #144]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004176:	6593      	str	r3, [r2, #88]	@ 0x58
 8004178:	4b22      	ldr	r3, [pc, #136]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004184:	f7ff f9a6 	bl	80034d4 <HAL_PWREx_GetVoltageRange>
 8004188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004194:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d10b      	bne.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b80      	cmp	r3, #128	@ 0x80
 80041a2:	d919      	bls.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80041a8:	d902      	bls.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041aa:	2302      	movs	r3, #2
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e013      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b0:	2301      	movs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e010      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b80      	cmp	r3, #128	@ 0x80
 80041ba:	d902      	bls.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041bc:	2303      	movs	r3, #3
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e00a      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b80      	cmp	r3, #128	@ 0x80
 80041c6:	d102      	bne.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c8:	2302      	movs	r3, #2
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e004      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b70      	cmp	r3, #112	@ 0x70
 80041d2:	d101      	bne.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d4:	2301      	movs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 0207 	bic.w	r2, r3, #7
 80041e0:	4909      	ldr	r1, [pc, #36]	@ (8004208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041e8:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d001      	beq.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	40022000 	.word	0x40022000

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004214:	2300      	movs	r3, #0
 8004216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004218:	2300      	movs	r3, #0
 800421a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d031      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004230:	d01a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004232:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004236:	d814      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800423c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004240:	d10f      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004242:	4b5d      	ldr	r3, [pc, #372]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a5c      	ldr	r2, [pc, #368]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fa22 	bl	80046a0 <RCCEx_PLLSAI1_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
      break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004270:	4b51      	ldr	r3, [pc, #324]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	494e      	ldr	r1, [pc, #312]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 809e 	beq.w	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429e:	4b46      	ldr	r3, [pc, #280]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b40      	ldr	r3, [pc, #256]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4a3f      	ldr	r2, [pc, #252]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c0:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d0:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a39      	ldr	r2, [pc, #228]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042dc:	f7fd fef6 	bl	80020cc <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e4:	f7fd fef2 	bl	80020cc <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	74fb      	strb	r3, [r7, #19]
        break;
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f8:	4b30      	ldr	r3, [pc, #192]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d15a      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430a:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d019      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004330:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004332:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004338:	4a1f      	ldr	r2, [pc, #124]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004348:	4a1b      	ldr	r2, [pc, #108]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800434a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004352:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd feb2 	bl	80020cc <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	e00b      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd feae 	bl	80020cc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d902      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	74fb      	strb	r3, [r7, #19]
            break;
 8004382:	e006      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004384:	4b0c      	ldr	r3, [pc, #48]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0ec      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004398:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	4904      	ldr	r1, [pc, #16]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043ae:	e009      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
 80043b4:	e006      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c4:	7c7b      	ldrb	r3, [r7, #17]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	4a8c      	ldr	r2, [pc, #560]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e2:	4b87      	ldr	r3, [pc, #540]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f023 0203 	bic.w	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4983      	ldr	r1, [pc, #524]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004404:	4b7e      	ldr	r3, [pc, #504]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	f023 020c 	bic.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	497b      	ldr	r1, [pc, #492]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004426:	4b76      	ldr	r3, [pc, #472]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	4972      	ldr	r1, [pc, #456]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004448:	4b6d      	ldr	r3, [pc, #436]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	496a      	ldr	r1, [pc, #424]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800446a:	4b65      	ldr	r3, [pc, #404]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	4961      	ldr	r1, [pc, #388]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800448c:	4b5c      	ldr	r3, [pc, #368]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	4959      	ldr	r1, [pc, #356]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ae:	4b54      	ldr	r3, [pc, #336]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	4950      	ldr	r1, [pc, #320]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	4948      	ldr	r1, [pc, #288]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044f2:	4b43      	ldr	r3, [pc, #268]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	493f      	ldr	r1, [pc, #252]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d028      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004514:	4b3a      	ldr	r3, [pc, #232]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004522:	4937      	ldr	r1, [pc, #220]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004532:	d106      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004534:	4b32      	ldr	r3, [pc, #200]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800453a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800453e:	60d3      	str	r3, [r2, #12]
 8004540:	e011      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800454a:	d10c      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f8a4 	bl	80046a0 <RCCEx_PLLSAI1_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d028      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004572:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004580:	491f      	ldr	r1, [pc, #124]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004590:	d106      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004592:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4a1a      	ldr	r2, [pc, #104]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459c:	60d3      	str	r3, [r2, #12]
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f875 	bl	80046a0 <RCCEx_PLLSAI1_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d02b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045de:	4908      	ldr	r1, [pc, #32]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ee:	d109      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f0:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045fa:	60d3      	str	r3, [r2, #12]
 80045fc:	e014      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f843 	bl	80046a0 <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	4916      	ldr	r1, [pc, #88]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f820 	bl	80046a0 <RCCEx_PLLSAI1_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800467a:	4b08      	ldr	r3, [pc, #32]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004688:	4904      	ldr	r1, [pc, #16]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004690:	7cbb      	ldrb	r3, [r7, #18]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000

080046a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ae:	4b74      	ldr	r3, [pc, #464]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046ba:	4b71      	ldr	r3, [pc, #452]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0203 	and.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d10d      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
       ||
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
       ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d047      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
 80046ea:	e044      	b.n	8004776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d018      	beq.n	8004726 <RCCEx_PLLSAI1_Config+0x86>
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d825      	bhi.n	8004744 <RCCEx_PLLSAI1_Config+0xa4>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d002      	beq.n	8004702 <RCCEx_PLLSAI1_Config+0x62>
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d009      	beq.n	8004714 <RCCEx_PLLSAI1_Config+0x74>
 8004700:	e020      	b.n	8004744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004702:	4b5f      	ldr	r3, [pc, #380]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d11d      	bne.n	800474a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004712:	e01a      	b.n	800474a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004714:	4b5a      	ldr	r3, [pc, #360]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004724:	e013      	b.n	800474e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004726:	4b56      	ldr	r3, [pc, #344]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004732:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004742:	e006      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	e004      	b.n	8004754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004752:	bf00      	nop
    }

    if(status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800475a:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	430b      	orrs	r3, r1
 8004770:	4943      	ldr	r1, [pc, #268]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004772:	4313      	orrs	r3, r2
 8004774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d17c      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800477c:	4b40      	ldr	r3, [pc, #256]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3f      	ldr	r2, [pc, #252]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004788:	f7fd fca0 	bl	80020cc <HAL_GetTick>
 800478c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800478e:	e009      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004790:	f7fd fc9c 	bl	80020cc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	73fb      	strb	r3, [r7, #15]
        break;
 80047a2:	e005      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047a4:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ef      	bne.n	8004790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d15f      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d110      	bne.n	80047de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047bc:	4b30      	ldr	r3, [pc, #192]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80047c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6892      	ldr	r2, [r2, #8]
 80047cc:	0211      	lsls	r1, r2, #8
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68d2      	ldr	r2, [r2, #12]
 80047d2:	06d2      	lsls	r2, r2, #27
 80047d4:	430a      	orrs	r2, r1
 80047d6:	492a      	ldr	r1, [pc, #168]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	610b      	str	r3, [r1, #16]
 80047dc:	e027      	b.n	800482e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d112      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e4:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6912      	ldr	r2, [r2, #16]
 80047fa:	0852      	lsrs	r2, r2, #1
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0552      	lsls	r2, r2, #21
 8004800:	430a      	orrs	r2, r1
 8004802:	491f      	ldr	r1, [pc, #124]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004804:	4313      	orrs	r3, r2
 8004806:	610b      	str	r3, [r1, #16]
 8004808:	e011      	b.n	800482e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480a:	4b1d      	ldr	r3, [pc, #116]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004812:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6892      	ldr	r2, [r2, #8]
 800481a:	0211      	lsls	r1, r2, #8
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6952      	ldr	r2, [r2, #20]
 8004820:	0852      	lsrs	r2, r2, #1
 8004822:	3a01      	subs	r2, #1
 8004824:	0652      	lsls	r2, r2, #25
 8004826:	430a      	orrs	r2, r1
 8004828:	4915      	ldr	r1, [pc, #84]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800482e:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a13      	ldr	r2, [pc, #76]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004838:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fd fc47 	bl	80020cc <HAL_GetTick>
 800483e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004840:	e009      	b.n	8004856 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004842:	f7fd fc43 	bl	80020cc <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d902      	bls.n	8004856 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	73fb      	strb	r3, [r7, #15]
          break;
 8004854:	e005      	b.n	8004862 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ef      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	4903      	ldr	r1, [pc, #12]	@ (8004880 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e097      	b.n	80049c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd fa1b 	bl	8001ce8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 f907 	bl	8004aec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4313      	orrs	r3, r2
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004924:	f023 030c 	bic.w	r3, r3, #12
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	4313      	orrs	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	031b      	lsls	r3, r3, #12
 8004954:	4313      	orrs	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4313      	orrs	r3, r2
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a06:	7b7b      	ldrb	r3, [r7, #13]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e069      	b.n	8004ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a20:	e031      	b.n	8004a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d110      	bne.n	8004a4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d102      	bne.n	8004a34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a2e:	7b3b      	ldrb	r3, [r7, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e055      	b.n	8004ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a48:	e01d      	b.n	8004a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d108      	bne.n	8004a62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	7b7b      	ldrb	r3, [r7, #13]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d102      	bne.n	8004a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a5c:	7b3b      	ldrb	r3, [r7, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d001      	beq.n	8004a66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e03e      	b.n	8004ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_TIM_Encoder_Start+0xc4>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d008      	beq.n	8004aa4 <HAL_TIM_Encoder_Start+0xd4>
 8004a92:	e00f      	b.n	8004ab4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f895 	bl	8004bcc <TIM_CCxChannelCmd>
      break;
 8004aa2:	e016      	b.n	8004ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2104      	movs	r1, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f88d 	bl	8004bcc <TIM_CCxChannelCmd>
      break;
 8004ab2:	e00e      	b.n	8004ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f885 	bl	8004bcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2104      	movs	r1, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f87e 	bl	8004bcc <TIM_CCxChannelCmd>
      break;
 8004ad0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a30      	ldr	r2, [pc, #192]	@ (8004bc0 <TIM_Base_SetConfig+0xd4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x20>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0a:	d108      	bne.n	8004b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a27      	ldr	r2, [pc, #156]	@ (8004bc0 <TIM_Base_SetConfig+0xd4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x52>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x52>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a24      	ldr	r2, [pc, #144]	@ (8004bc4 <TIM_Base_SetConfig+0xd8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x52>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a23      	ldr	r2, [pc, #140]	@ (8004bc8 <TIM_Base_SetConfig+0xdc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <TIM_Base_SetConfig+0xd4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_Base_SetConfig+0xa0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <TIM_Base_SetConfig+0xd8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0xa0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a10      	ldr	r2, [pc, #64]	@ (8004bc8 <TIM_Base_SetConfig+0xdc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	611a      	str	r2, [r3, #16]
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400

08004bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2201      	movs	r2, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1a      	ldr	r2, [r3, #32]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	401a      	ands	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e04f      	b.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a10      	ldr	r2, [pc, #64]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10c      	bne.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40014000 	.word	0x40014000

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e040      	b.n	8004d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fd f82e 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	@ 0x24
 8004d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fb0c 	bl	8005348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f8af 	bl	8004e94 <UART_SetConfig>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e01b      	b.n	8004d78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb8b 	bl	800548c <UART_CheckIdleState>
 8004d76:	4603      	mov	r3, r0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d177      	bne.n	8004e88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Transmit+0x24>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e070      	b.n	8004e8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2221      	movs	r2, #33	@ 0x21
 8004db4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fd f989 	bl	80020cc <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x68>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df0:	e02f      	b.n	8004e52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fbed 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e03b      	b.n	8004e8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	b292      	uxth	r2, r2
 8004e26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e007      	b.n	8004e40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1c9      	bne.n	8004df2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2140      	movs	r1, #64	@ 0x40
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fbb7 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e005      	b.n	8004e8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e98:	b08a      	sub	sp, #40	@ 0x28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800513c <UART_SetConfig+0x2a8>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a93      	ldr	r2, [pc, #588]	@ (8005140 <UART_SetConfig+0x2ac>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efc:	4313      	orrs	r3, r2
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a8a      	ldr	r2, [pc, #552]	@ (8005144 <UART_SetConfig+0x2b0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d126      	bne.n	8004f6c <UART_SetConfig+0xd8>
 8004f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8005148 <UART_SetConfig+0x2b4>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d81b      	bhi.n	8004f64 <UART_SetConfig+0xd0>
 8004f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <UART_SetConfig+0xa0>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e0ab      	b.n	80050a4 <UART_SetConfig+0x210>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e0a7      	b.n	80050a4 <UART_SetConfig+0x210>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e0a3      	b.n	80050a4 <UART_SetConfig+0x210>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e09f      	b.n	80050a4 <UART_SetConfig+0x210>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6a:	e09b      	b.n	80050a4 <UART_SetConfig+0x210>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a76      	ldr	r2, [pc, #472]	@ (800514c <UART_SetConfig+0x2b8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d138      	bne.n	8004fe8 <UART_SetConfig+0x154>
 8004f76:	4b74      	ldr	r3, [pc, #464]	@ (8005148 <UART_SetConfig+0x2b4>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d82d      	bhi.n	8004fe0 <UART_SetConfig+0x14c>
 8004f84:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <UART_SetConfig+0xf8>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fe1 	.word	0x08004fe1
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fe1 	.word	0x08004fe1
 8004fa4:	08004fe1 	.word	0x08004fe1
 8004fa8:	08004fe1 	.word	0x08004fe1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e06d      	b.n	80050a4 <UART_SetConfig+0x210>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e069      	b.n	80050a4 <UART_SetConfig+0x210>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e065      	b.n	80050a4 <UART_SetConfig+0x210>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fde:	e061      	b.n	80050a4 <UART_SetConfig+0x210>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e05d      	b.n	80050a4 <UART_SetConfig+0x210>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a58      	ldr	r2, [pc, #352]	@ (8005150 <UART_SetConfig+0x2bc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d125      	bne.n	800503e <UART_SetConfig+0x1aa>
 8004ff2:	4b55      	ldr	r3, [pc, #340]	@ (8005148 <UART_SetConfig+0x2b4>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ffc:	2b30      	cmp	r3, #48	@ 0x30
 8004ffe:	d016      	beq.n	800502e <UART_SetConfig+0x19a>
 8005000:	2b30      	cmp	r3, #48	@ 0x30
 8005002:	d818      	bhi.n	8005036 <UART_SetConfig+0x1a2>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d00a      	beq.n	800501e <UART_SetConfig+0x18a>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d814      	bhi.n	8005036 <UART_SetConfig+0x1a2>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <UART_SetConfig+0x182>
 8005010:	2b10      	cmp	r3, #16
 8005012:	d008      	beq.n	8005026 <UART_SetConfig+0x192>
 8005014:	e00f      	b.n	8005036 <UART_SetConfig+0x1a2>
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501c:	e042      	b.n	80050a4 <UART_SetConfig+0x210>
 800501e:	2302      	movs	r3, #2
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005024:	e03e      	b.n	80050a4 <UART_SetConfig+0x210>
 8005026:	2304      	movs	r3, #4
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502c:	e03a      	b.n	80050a4 <UART_SetConfig+0x210>
 800502e:	2308      	movs	r3, #8
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005034:	e036      	b.n	80050a4 <UART_SetConfig+0x210>
 8005036:	2310      	movs	r3, #16
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503c:	e032      	b.n	80050a4 <UART_SetConfig+0x210>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3f      	ldr	r2, [pc, #252]	@ (8005140 <UART_SetConfig+0x2ac>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d12a      	bne.n	800509e <UART_SetConfig+0x20a>
 8005048:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <UART_SetConfig+0x2b4>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005052:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005056:	d01a      	beq.n	800508e <UART_SetConfig+0x1fa>
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505c:	d81b      	bhi.n	8005096 <UART_SetConfig+0x202>
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005062:	d00c      	beq.n	800507e <UART_SetConfig+0x1ea>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005068:	d815      	bhi.n	8005096 <UART_SetConfig+0x202>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <UART_SetConfig+0x1e2>
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005072:	d008      	beq.n	8005086 <UART_SetConfig+0x1f2>
 8005074:	e00f      	b.n	8005096 <UART_SetConfig+0x202>
 8005076:	2300      	movs	r3, #0
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507c:	e012      	b.n	80050a4 <UART_SetConfig+0x210>
 800507e:	2302      	movs	r3, #2
 8005080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005084:	e00e      	b.n	80050a4 <UART_SetConfig+0x210>
 8005086:	2304      	movs	r3, #4
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508c:	e00a      	b.n	80050a4 <UART_SetConfig+0x210>
 800508e:	2308      	movs	r3, #8
 8005090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005094:	e006      	b.n	80050a4 <UART_SetConfig+0x210>
 8005096:	2310      	movs	r3, #16
 8005098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509c:	e002      	b.n	80050a4 <UART_SetConfig+0x210>
 800509e:	2310      	movs	r3, #16
 80050a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a25      	ldr	r2, [pc, #148]	@ (8005140 <UART_SetConfig+0x2ac>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f040 808a 	bne.w	80051c4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d824      	bhi.n	8005102 <UART_SetConfig+0x26e>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0x22c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005103 	.word	0x08005103
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	08005103 	.word	0x08005103
 80050d0:	080050f3 	.word	0x080050f3
 80050d4:	08005103 	.word	0x08005103
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005103 	.word	0x08005103
 80050e0:	080050fb 	.word	0x080050fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7ff f806 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e010      	b.n	800510e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <UART_SetConfig+0x2c0>)
 80050ee:	61fb      	str	r3, [r7, #28]
        break;
 80050f0:	e00d      	b.n	800510e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f2:	f7fe ff67 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 80050f6:	61f8      	str	r0, [r7, #28]
        break;
 80050f8:	e009      	b.n	800510e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fe:	61fb      	str	r3, [r7, #28]
        break;
 8005100:	e005      	b.n	800510e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800510c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8109 	beq.w	8005328 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	429a      	cmp	r2, r3
 8005124:	d305      	bcc.n	8005132 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	429a      	cmp	r2, r3
 8005130:	d912      	bls.n	8005158 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005138:	e0f6      	b.n	8005328 <UART_SetConfig+0x494>
 800513a:	bf00      	nop
 800513c:	efff69f3 	.word	0xefff69f3
 8005140:	40008000 	.word	0x40008000
 8005144:	40013800 	.word	0x40013800
 8005148:	40021000 	.word	0x40021000
 800514c:	40004400 	.word	0x40004400
 8005150:	40004800 	.word	0x40004800
 8005154:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2200      	movs	r2, #0
 800515c:	461c      	mov	r4, r3
 800515e:	4615      	mov	r5, r2
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	022b      	lsls	r3, r5, #8
 800516a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800516e:	0222      	lsls	r2, r4, #8
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	6849      	ldr	r1, [r1, #4]
 8005174:	0849      	lsrs	r1, r1, #1
 8005176:	2000      	movs	r0, #0
 8005178:	4688      	mov	r8, r1
 800517a:	4681      	mov	r9, r0
 800517c:	eb12 0a08 	adds.w	sl, r2, r8
 8005180:	eb43 0b09 	adc.w	fp, r3, r9
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	f7fb fa27 	bl	80005e8 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4613      	mov	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a8:	d308      	bcc.n	80051bc <UART_SetConfig+0x328>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b0:	d204      	bcs.n	80051bc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	e0b5      	b.n	8005328 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c2:	e0b1      	b.n	8005328 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	d15d      	bne.n	800528a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80051ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d827      	bhi.n	8005226 <UART_SetConfig+0x392>
 80051d6:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x348>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fe ff78 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8005204:	61f8      	str	r0, [r7, #28]
        break;
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fe ff8a 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b4c      	ldr	r3, [pc, #304]	@ (8005344 <UART_SetConfig+0x4b0>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fe fed5 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d077      	beq.n	8005328 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005a      	lsls	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d916      	bls.n	8005282 <UART_SetConfig+0x3ee>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d212      	bcs.n	8005282 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f023 030f 	bic.w	r3, r3, #15
 8005264:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	b29a      	uxth	r2, r3
 8005272:	8afb      	ldrh	r3, [r7, #22]
 8005274:	4313      	orrs	r3, r2
 8005276:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	8afa      	ldrh	r2, [r7, #22]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e052      	b.n	8005328 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005288:	e04e      	b.n	8005328 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800528a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800528e:	2b08      	cmp	r3, #8
 8005290:	d827      	bhi.n	80052e2 <UART_SetConfig+0x44e>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x404>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052e3 	.word	0x080052e3
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe ff1a 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 80052c0:	61f8      	str	r0, [r7, #28]
        break;
 80052c2:	e014      	b.n	80052ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fe ff2c 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
        break;
 80052ca:	e010      	b.n	80052ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <UART_SetConfig+0x4b0>)
 80052ce:	61fb      	str	r3, [r7, #28]
        break;
 80052d0:	e00d      	b.n	80052ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe fe77 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 80052d6:	61f8      	str	r0, [r7, #28]
        break;
 80052d8:	e009      	b.n	80052ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	61fb      	str	r3, [r7, #28]
        break;
 80052e0:	e005      	b.n	80052ee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052ec:	bf00      	nop
    }

    if (pclk != 0U)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	085a      	lsrs	r2, r3, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d909      	bls.n	8005322 <UART_SetConfig+0x48e>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d205      	bcs.n	8005322 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e002      	b.n	8005328 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005334:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	@ 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	00f42400 	.word	0x00f42400

08005348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005446:	d10a      	bne.n	800545e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	@ 0x60
 8005490:	af02      	add	r7, sp, #8
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800549c:	f7fc fe16 	bl	80020cc <HAL_GetTick>
 80054a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d12e      	bne.n	800550e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b8:	2200      	movs	r2, #0
 80054ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f88c 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d021      	beq.n	800550e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e062      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d149      	bne.n	80055b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f856 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d03c      	beq.n	80055b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	623b      	str	r3, [r7, #32]
   return(result);
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30
 8005556:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60fb      	str	r3, [r7, #12]
   return(result);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e011      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3758      	adds	r7, #88	@ 0x58
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	e04f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d04b      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fc fd69 	bl	80020cc <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x30>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e04e      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d037      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b80      	cmp	r3, #128	@ 0x80
 8005622:	d034      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	d031      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d110      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f838 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2208      	movs	r2, #8
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e029      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d111      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f81e 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0a0      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	@ 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	2b01      	cmp	r3, #1
 800572a:	d118      	bne.n	800575e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	@ 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <fmaxf>:
 800577e:	b508      	push	{r3, lr}
 8005780:	ed2d 8b02 	vpush	{d8}
 8005784:	eeb0 8a40 	vmov.f32	s16, s0
 8005788:	eef0 8a60 	vmov.f32	s17, s1
 800578c:	f000 f814 	bl	80057b8 <__fpclassifyf>
 8005790:	b930      	cbnz	r0, 80057a0 <fmaxf+0x22>
 8005792:	eeb0 8a68 	vmov.f32	s16, s17
 8005796:	eeb0 0a48 	vmov.f32	s0, s16
 800579a:	ecbd 8b02 	vpop	{d8}
 800579e:	bd08      	pop	{r3, pc}
 80057a0:	eeb0 0a68 	vmov.f32	s0, s17
 80057a4:	f000 f808 	bl	80057b8 <__fpclassifyf>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0f4      	beq.n	8005796 <fmaxf+0x18>
 80057ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80057b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b4:	dded      	ble.n	8005792 <fmaxf+0x14>
 80057b6:	e7ee      	b.n	8005796 <fmaxf+0x18>

080057b8 <__fpclassifyf>:
 80057b8:	ee10 3a10 	vmov	r3, s0
 80057bc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80057c0:	d00d      	beq.n	80057de <__fpclassifyf+0x26>
 80057c2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80057c6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80057ca:	d30a      	bcc.n	80057e2 <__fpclassifyf+0x2a>
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <__fpclassifyf+0x34>)
 80057ce:	1e42      	subs	r2, r0, #1
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d908      	bls.n	80057e6 <__fpclassifyf+0x2e>
 80057d4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80057d8:	4258      	negs	r0, r3
 80057da:	4158      	adcs	r0, r3
 80057dc:	4770      	bx	lr
 80057de:	2002      	movs	r0, #2
 80057e0:	4770      	bx	lr
 80057e2:	2004      	movs	r0, #4
 80057e4:	4770      	bx	lr
 80057e6:	2003      	movs	r0, #3
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	007ffffe 	.word	0x007ffffe

080057f0 <siprintf>:
 80057f0:	b40e      	push	{r1, r2, r3}
 80057f2:	b500      	push	{lr}
 80057f4:	b09c      	sub	sp, #112	@ 0x70
 80057f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	9006      	str	r0, [sp, #24]
 80057fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005800:	4809      	ldr	r0, [pc, #36]	@ (8005828 <siprintf+0x38>)
 8005802:	9107      	str	r1, [sp, #28]
 8005804:	9104      	str	r1, [sp, #16]
 8005806:	4909      	ldr	r1, [pc, #36]	@ (800582c <siprintf+0x3c>)
 8005808:	f853 2b04 	ldr.w	r2, [r3], #4
 800580c:	9105      	str	r1, [sp, #20]
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	a902      	add	r1, sp, #8
 8005814:	f000 f994 	bl	8005b40 <_svfiprintf_r>
 8005818:	9b02      	ldr	r3, [sp, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	b01c      	add	sp, #112	@ 0x70
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b003      	add	sp, #12
 8005826:	4770      	bx	lr
 8005828:	20000020 	.word	0x20000020
 800582c:	ffff0208 	.word	0xffff0208

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <__errno>:
 8005840:	4b01      	ldr	r3, [pc, #4]	@ (8005848 <__errno+0x8>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000020 	.word	0x20000020

0800584c <__libc_init_array>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4d0d      	ldr	r5, [pc, #52]	@ (8005884 <__libc_init_array+0x38>)
 8005850:	4c0d      	ldr	r4, [pc, #52]	@ (8005888 <__libc_init_array+0x3c>)
 8005852:	1b64      	subs	r4, r4, r5
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	2600      	movs	r6, #0
 8005858:	42a6      	cmp	r6, r4
 800585a:	d109      	bne.n	8005870 <__libc_init_array+0x24>
 800585c:	4d0b      	ldr	r5, [pc, #44]	@ (800588c <__libc_init_array+0x40>)
 800585e:	4c0c      	ldr	r4, [pc, #48]	@ (8005890 <__libc_init_array+0x44>)
 8005860:	f000 fc66 	bl	8006130 <_init>
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	2600      	movs	r6, #0
 800586a:	42a6      	cmp	r6, r4
 800586c:	d105      	bne.n	800587a <__libc_init_array+0x2e>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	f855 3b04 	ldr.w	r3, [r5], #4
 8005874:	4798      	blx	r3
 8005876:	3601      	adds	r6, #1
 8005878:	e7ee      	b.n	8005858 <__libc_init_array+0xc>
 800587a:	f855 3b04 	ldr.w	r3, [r5], #4
 800587e:	4798      	blx	r3
 8005880:	3601      	adds	r6, #1
 8005882:	e7f2      	b.n	800586a <__libc_init_array+0x1e>
 8005884:	080061e8 	.word	0x080061e8
 8005888:	080061e8 	.word	0x080061e8
 800588c:	080061e8 	.word	0x080061e8
 8005890:	080061ec 	.word	0x080061ec

08005894 <__retarget_lock_acquire_recursive>:
 8005894:	4770      	bx	lr

08005896 <__retarget_lock_release_recursive>:
 8005896:	4770      	bx	lr

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d041      	beq.n	8005924 <_free_r+0x8c>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f000 f8e0 	bl	8005a70 <__malloc_lock>
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <_free_r+0x90>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f000 b8dc 	b.w	8005a7c <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	4408      	add	r0, r1
 8005900:	6010      	str	r0, [r2, #0]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf04      	itt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1809      	addeq	r1, r1, r0
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	6054      	str	r4, [r2, #4]
 8005922:	e7ca      	b.n	80058ba <_free_r+0x22>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	200003cc 	.word	0x200003cc

0800592c <sbrk_aligned>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4e0f      	ldr	r6, [pc, #60]	@ (800596c <sbrk_aligned+0x40>)
 8005930:	460c      	mov	r4, r1
 8005932:	6831      	ldr	r1, [r6, #0]
 8005934:	4605      	mov	r5, r0
 8005936:	b911      	cbnz	r1, 800593e <sbrk_aligned+0x12>
 8005938:	f000 fba6 	bl	8006088 <_sbrk_r>
 800593c:	6030      	str	r0, [r6, #0]
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 fba1 	bl	8006088 <_sbrk_r>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d103      	bne.n	8005952 <sbrk_aligned+0x26>
 800594a:	f04f 34ff 	mov.w	r4, #4294967295
 800594e:	4620      	mov	r0, r4
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d0f8      	beq.n	800594e <sbrk_aligned+0x22>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fb92 	bl	8006088 <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d1f2      	bne.n	800594e <sbrk_aligned+0x22>
 8005968:	e7ef      	b.n	800594a <sbrk_aligned+0x1e>
 800596a:	bf00      	nop
 800596c:	200003c8 	.word	0x200003c8

08005970 <_malloc_r>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	1ccd      	adds	r5, r1, #3
 8005976:	f025 0503 	bic.w	r5, r5, #3
 800597a:	3508      	adds	r5, #8
 800597c:	2d0c      	cmp	r5, #12
 800597e:	bf38      	it	cc
 8005980:	250c      	movcc	r5, #12
 8005982:	2d00      	cmp	r5, #0
 8005984:	4606      	mov	r6, r0
 8005986:	db01      	blt.n	800598c <_malloc_r+0x1c>
 8005988:	42a9      	cmp	r1, r5
 800598a:	d904      	bls.n	8005996 <_malloc_r+0x26>
 800598c:	230c      	movs	r3, #12
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	2000      	movs	r0, #0
 8005992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a6c <_malloc_r+0xfc>
 800599a:	f000 f869 	bl	8005a70 <__malloc_lock>
 800599e:	f8d8 3000 	ldr.w	r3, [r8]
 80059a2:	461c      	mov	r4, r3
 80059a4:	bb44      	cbnz	r4, 80059f8 <_malloc_r+0x88>
 80059a6:	4629      	mov	r1, r5
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff ffbf 	bl	800592c <sbrk_aligned>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	4604      	mov	r4, r0
 80059b2:	d158      	bne.n	8005a66 <_malloc_r+0xf6>
 80059b4:	f8d8 4000 	ldr.w	r4, [r8]
 80059b8:	4627      	mov	r7, r4
 80059ba:	2f00      	cmp	r7, #0
 80059bc:	d143      	bne.n	8005a46 <_malloc_r+0xd6>
 80059be:	2c00      	cmp	r4, #0
 80059c0:	d04b      	beq.n	8005a5a <_malloc_r+0xea>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	4639      	mov	r1, r7
 80059c6:	4630      	mov	r0, r6
 80059c8:	eb04 0903 	add.w	r9, r4, r3
 80059cc:	f000 fb5c 	bl	8006088 <_sbrk_r>
 80059d0:	4581      	cmp	r9, r0
 80059d2:	d142      	bne.n	8005a5a <_malloc_r+0xea>
 80059d4:	6821      	ldr	r1, [r4, #0]
 80059d6:	1a6d      	subs	r5, r5, r1
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff ffa6 	bl	800592c <sbrk_aligned>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d03a      	beq.n	8005a5a <_malloc_r+0xea>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	442b      	add	r3, r5
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	f8d8 3000 	ldr.w	r3, [r8]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	bb62      	cbnz	r2, 8005a4c <_malloc_r+0xdc>
 80059f2:	f8c8 7000 	str.w	r7, [r8]
 80059f6:	e00f      	b.n	8005a18 <_malloc_r+0xa8>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	1b52      	subs	r2, r2, r5
 80059fc:	d420      	bmi.n	8005a40 <_malloc_r+0xd0>
 80059fe:	2a0b      	cmp	r2, #11
 8005a00:	d917      	bls.n	8005a32 <_malloc_r+0xc2>
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	6025      	str	r5, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	6059      	strne	r1, [r3, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	bf08      	it	eq
 8005a10:	f8c8 1000 	streq.w	r1, [r8]
 8005a14:	5162      	str	r2, [r4, r5]
 8005a16:	604b      	str	r3, [r1, #4]
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f82f 	bl	8005a7c <__malloc_unlock>
 8005a1e:	f104 000b 	add.w	r0, r4, #11
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	f020 0007 	bic.w	r0, r0, #7
 8005a28:	1ac2      	subs	r2, r0, r3
 8005a2a:	bf1c      	itt	ne
 8005a2c:	1a1b      	subne	r3, r3, r0
 8005a2e:	50a3      	strne	r3, [r4, r2]
 8005a30:	e7af      	b.n	8005992 <_malloc_r+0x22>
 8005a32:	6862      	ldr	r2, [r4, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	bf0c      	ite	eq
 8005a38:	f8c8 2000 	streq.w	r2, [r8]
 8005a3c:	605a      	strne	r2, [r3, #4]
 8005a3e:	e7eb      	b.n	8005a18 <_malloc_r+0xa8>
 8005a40:	4623      	mov	r3, r4
 8005a42:	6864      	ldr	r4, [r4, #4]
 8005a44:	e7ae      	b.n	80059a4 <_malloc_r+0x34>
 8005a46:	463c      	mov	r4, r7
 8005a48:	687f      	ldr	r7, [r7, #4]
 8005a4a:	e7b6      	b.n	80059ba <_malloc_r+0x4a>
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d1fb      	bne.n	8005a4c <_malloc_r+0xdc>
 8005a54:	2300      	movs	r3, #0
 8005a56:	6053      	str	r3, [r2, #4]
 8005a58:	e7de      	b.n	8005a18 <_malloc_r+0xa8>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f000 f80c 	bl	8005a7c <__malloc_unlock>
 8005a64:	e794      	b.n	8005990 <_malloc_r+0x20>
 8005a66:	6005      	str	r5, [r0, #0]
 8005a68:	e7d6      	b.n	8005a18 <_malloc_r+0xa8>
 8005a6a:	bf00      	nop
 8005a6c:	200003cc 	.word	0x200003cc

08005a70 <__malloc_lock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	@ (8005a78 <__malloc_lock+0x8>)
 8005a72:	f7ff bf0f 	b.w	8005894 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	200003c4 	.word	0x200003c4

08005a7c <__malloc_unlock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	@ (8005a84 <__malloc_unlock+0x8>)
 8005a7e:	f7ff bf0a 	b.w	8005896 <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	200003c4 	.word	0x200003c4

08005a88 <__ssputs_r>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	688e      	ldr	r6, [r1, #8]
 8005a8e:	461f      	mov	r7, r3
 8005a90:	42be      	cmp	r6, r7
 8005a92:	680b      	ldr	r3, [r1, #0]
 8005a94:	4682      	mov	sl, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4690      	mov	r8, r2
 8005a9a:	d82d      	bhi.n	8005af8 <__ssputs_r+0x70>
 8005a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005aa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005aa4:	d026      	beq.n	8005af4 <__ssputs_r+0x6c>
 8005aa6:	6965      	ldr	r5, [r4, #20]
 8005aa8:	6909      	ldr	r1, [r1, #16]
 8005aaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aae:	eba3 0901 	sub.w	r9, r3, r1
 8005ab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ab6:	1c7b      	adds	r3, r7, #1
 8005ab8:	444b      	add	r3, r9
 8005aba:	106d      	asrs	r5, r5, #1
 8005abc:	429d      	cmp	r5, r3
 8005abe:	bf38      	it	cc
 8005ac0:	461d      	movcc	r5, r3
 8005ac2:	0553      	lsls	r3, r2, #21
 8005ac4:	d527      	bpl.n	8005b16 <__ssputs_r+0x8e>
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7ff ff52 	bl	8005970 <_malloc_r>
 8005acc:	4606      	mov	r6, r0
 8005ace:	b360      	cbz	r0, 8005b2a <__ssputs_r+0xa2>
 8005ad0:	6921      	ldr	r1, [r4, #16]
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	f000 fae8 	bl	80060a8 <memcpy>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	6126      	str	r6, [r4, #16]
 8005ae6:	6165      	str	r5, [r4, #20]
 8005ae8:	444e      	add	r6, r9
 8005aea:	eba5 0509 	sub.w	r5, r5, r9
 8005aee:	6026      	str	r6, [r4, #0]
 8005af0:	60a5      	str	r5, [r4, #8]
 8005af2:	463e      	mov	r6, r7
 8005af4:	42be      	cmp	r6, r7
 8005af6:	d900      	bls.n	8005afa <__ssputs_r+0x72>
 8005af8:	463e      	mov	r6, r7
 8005afa:	6820      	ldr	r0, [r4, #0]
 8005afc:	4632      	mov	r2, r6
 8005afe:	4641      	mov	r1, r8
 8005b00:	f000 faa8 	bl	8006054 <memmove>
 8005b04:	68a3      	ldr	r3, [r4, #8]
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	60a3      	str	r3, [r4, #8]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4433      	add	r3, r6
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	2000      	movs	r0, #0
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	462a      	mov	r2, r5
 8005b18:	f000 fad4 	bl	80060c4 <_realloc_r>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d1e0      	bne.n	8005ae4 <__ssputs_r+0x5c>
 8005b22:	6921      	ldr	r1, [r4, #16]
 8005b24:	4650      	mov	r0, sl
 8005b26:	f7ff feb7 	bl	8005898 <_free_r>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e7e9      	b.n	8005b12 <__ssputs_r+0x8a>
	...

08005b40 <_svfiprintf_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	4698      	mov	r8, r3
 8005b46:	898b      	ldrh	r3, [r1, #12]
 8005b48:	061b      	lsls	r3, r3, #24
 8005b4a:	b09d      	sub	sp, #116	@ 0x74
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	4614      	mov	r4, r2
 8005b52:	d510      	bpl.n	8005b76 <_svfiprintf_r+0x36>
 8005b54:	690b      	ldr	r3, [r1, #16]
 8005b56:	b973      	cbnz	r3, 8005b76 <_svfiprintf_r+0x36>
 8005b58:	2140      	movs	r1, #64	@ 0x40
 8005b5a:	f7ff ff09 	bl	8005970 <_malloc_r>
 8005b5e:	6028      	str	r0, [r5, #0]
 8005b60:	6128      	str	r0, [r5, #16]
 8005b62:	b930      	cbnz	r0, 8005b72 <_svfiprintf_r+0x32>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	@ 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	2340      	movs	r3, #64	@ 0x40
 8005b74:	616b      	str	r3, [r5, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b84:	2330      	movs	r3, #48	@ 0x30
 8005b86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d24 <_svfiprintf_r+0x1e4>
 8005b8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b8e:	f04f 0901 	mov.w	r9, #1
 8005b92:	4623      	mov	r3, r4
 8005b94:	469a      	mov	sl, r3
 8005b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_svfiprintf_r+0x60>
 8005b9c:	2a25      	cmp	r2, #37	@ 0x25
 8005b9e:	d1f9      	bne.n	8005b94 <_svfiprintf_r+0x54>
 8005ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba4:	d00b      	beq.n	8005bbe <_svfiprintf_r+0x7e>
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ff6b 	bl	8005a88 <__ssputs_r>
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f000 80a7 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bba:	445a      	add	r2, fp
 8005bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 809f 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8005be0:	4654      	mov	r4, sl
 8005be2:	2205      	movs	r2, #5
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	484e      	ldr	r0, [pc, #312]	@ (8005d24 <_svfiprintf_r+0x1e4>)
 8005bea:	f7fa faf1 	bl	80001d0 <memchr>
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_svfiprintf_r+0xea>
 8005bf2:	06d0      	lsls	r0, r2, #27
 8005bf4:	bf44      	itt	mi
 8005bf6:	2320      	movmi	r3, #32
 8005bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bfc:	0711      	lsls	r1, r2, #28
 8005bfe:	bf44      	itt	mi
 8005c00:	232b      	movmi	r3, #43	@ 0x2b
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c06:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xfa>
 8005c0e:	9a07      	ldr	r2, [sp, #28]
 8005c10:	4654      	mov	r4, sl
 8005c12:	2000      	movs	r0, #0
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	@ 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d94b      	bls.n	8005cbc <_svfiprintf_r+0x17c>
 8005c24:	b1b0      	cbz	r0, 8005c54 <_svfiprintf_r+0x114>
 8005c26:	9207      	str	r2, [sp, #28]
 8005c28:	e014      	b.n	8005c54 <_svfiprintf_r+0x114>
 8005c2a:	eba0 0308 	sub.w	r3, r0, r8
 8005c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	46a2      	mov	sl, r4
 8005c38:	e7d2      	b.n	8005be0 <_svfiprintf_r+0xa0>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	425b      	neglt	r3, r3
 8005c48:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4c:	9307      	strge	r3, [sp, #28]
 8005c4e:	9307      	strlt	r3, [sp, #28]
 8005c50:	bfb8      	it	lt
 8005c52:	9204      	strlt	r2, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c58:	d10a      	bne.n	8005c70 <_svfiprintf_r+0x130>
 8005c5a:	7863      	ldrb	r3, [r4, #1]
 8005c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c5e:	d132      	bne.n	8005cc6 <_svfiprintf_r+0x186>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c6c:	3402      	adds	r4, #2
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d34 <_svfiprintf_r+0x1f4>
 8005c74:	7821      	ldrb	r1, [r4, #0]
 8005c76:	2203      	movs	r2, #3
 8005c78:	4650      	mov	r0, sl
 8005c7a:	f7fa faa9 	bl	80001d0 <memchr>
 8005c7e:	b138      	cbz	r0, 8005c90 <_svfiprintf_r+0x150>
 8005c80:	9b04      	ldr	r3, [sp, #16]
 8005c82:	eba0 000a 	sub.w	r0, r0, sl
 8005c86:	2240      	movs	r2, #64	@ 0x40
 8005c88:	4082      	lsls	r2, r0
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c94:	4824      	ldr	r0, [pc, #144]	@ (8005d28 <_svfiprintf_r+0x1e8>)
 8005c96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	f7fa fa98 	bl	80001d0 <memchr>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d036      	beq.n	8005d12 <_svfiprintf_r+0x1d2>
 8005ca4:	4b21      	ldr	r3, [pc, #132]	@ (8005d2c <_svfiprintf_r+0x1ec>)
 8005ca6:	bb1b      	cbnz	r3, 8005cf0 <_svfiprintf_r+0x1b0>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	3307      	adds	r3, #7
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb6:	4433      	add	r3, r6
 8005cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cba:	e76a      	b.n	8005b92 <_svfiprintf_r+0x52>
 8005cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7a8      	b.n	8005c18 <_svfiprintf_r+0xd8>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	3401      	adds	r4, #1
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cd8:	3a30      	subs	r2, #48	@ 0x30
 8005cda:	2a09      	cmp	r2, #9
 8005cdc:	d903      	bls.n	8005ce6 <_svfiprintf_r+0x1a6>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c6      	beq.n	8005c70 <_svfiprintf_r+0x130>
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	e7c4      	b.n	8005c70 <_svfiprintf_r+0x130>
 8005ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cea:	4604      	mov	r4, r0
 8005cec:	2301      	movs	r3, #1
 8005cee:	e7f0      	b.n	8005cd2 <_svfiprintf_r+0x192>
 8005cf0:	ab03      	add	r3, sp, #12
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <_svfiprintf_r+0x1f0>)
 8005cf8:	a904      	add	r1, sp, #16
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f3af 8000 	nop.w
 8005d00:	1c42      	adds	r2, r0, #1
 8005d02:	4606      	mov	r6, r0
 8005d04:	d1d6      	bne.n	8005cb4 <_svfiprintf_r+0x174>
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	065b      	lsls	r3, r3, #25
 8005d0a:	f53f af2d 	bmi.w	8005b68 <_svfiprintf_r+0x28>
 8005d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d10:	e72c      	b.n	8005b6c <_svfiprintf_r+0x2c>
 8005d12:	ab03      	add	r3, sp, #12
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	462a      	mov	r2, r5
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <_svfiprintf_r+0x1f0>)
 8005d1a:	a904      	add	r1, sp, #16
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f000 f879 	bl	8005e14 <_printf_i>
 8005d22:	e7ed      	b.n	8005d00 <_svfiprintf_r+0x1c0>
 8005d24:	080061ac 	.word	0x080061ac
 8005d28:	080061b6 	.word	0x080061b6
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	08005a89 	.word	0x08005a89
 8005d34:	080061b2 	.word	0x080061b2

08005d38 <_printf_common>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	4698      	mov	r8, r3
 8005d40:	688a      	ldr	r2, [r1, #8]
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bfb8      	it	lt
 8005d4c:	4613      	movlt	r3, r2
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d54:	4607      	mov	r7, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	b10a      	cbz	r2, 8005d5e <_printf_common+0x26>
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	0699      	lsls	r1, r3, #26
 8005d62:	bf42      	ittt	mi
 8005d64:	6833      	ldrmi	r3, [r6, #0]
 8005d66:	3302      	addmi	r3, #2
 8005d68:	6033      	strmi	r3, [r6, #0]
 8005d6a:	6825      	ldr	r5, [r4, #0]
 8005d6c:	f015 0506 	ands.w	r5, r5, #6
 8005d70:	d106      	bne.n	8005d80 <_printf_common+0x48>
 8005d72:	f104 0a19 	add.w	sl, r4, #25
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	6832      	ldr	r2, [r6, #0]
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dc26      	bgt.n	8005dce <_printf_common+0x96>
 8005d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	3b00      	subs	r3, #0
 8005d88:	bf18      	it	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	0692      	lsls	r2, r2, #26
 8005d8e:	d42b      	bmi.n	8005de8 <_printf_common+0xb0>
 8005d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d94:	4641      	mov	r1, r8
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c8      	blx	r9
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d01e      	beq.n	8005ddc <_printf_common+0xa4>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	bf02      	ittt	eq
 8005daa:	68e5      	ldreq	r5, [r4, #12]
 8005dac:	6833      	ldreq	r3, [r6, #0]
 8005dae:	1aed      	subeq	r5, r5, r3
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	bf0c      	ite	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	2500      	movne	r5, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	bfc4      	itt	gt
 8005dbe:	1a9b      	subgt	r3, r3, r2
 8005dc0:	18ed      	addgt	r5, r5, r3
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	341a      	adds	r4, #26
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	d11a      	bne.n	8005e00 <_printf_common+0xc8>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e008      	b.n	8005de0 <_printf_common+0xa8>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	47c8      	blx	r9
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d103      	bne.n	8005de4 <_printf_common+0xac>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	3501      	adds	r5, #1
 8005de6:	e7c6      	b.n	8005d76 <_printf_common+0x3e>
 8005de8:	18e1      	adds	r1, r4, r3
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	2030      	movs	r0, #48	@ 0x30
 8005dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005df2:	4422      	add	r2, r4
 8005df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	e7c7      	b.n	8005d90 <_printf_common+0x58>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4622      	mov	r2, r4
 8005e04:	4641      	mov	r1, r8
 8005e06:	4638      	mov	r0, r7
 8005e08:	47c8      	blx	r9
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0e6      	beq.n	8005ddc <_printf_common+0xa4>
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7d9      	b.n	8005dc6 <_printf_common+0x8e>
	...

08005e14 <_printf_i>:
 8005e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	7e0f      	ldrb	r7, [r1, #24]
 8005e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e1c:	2f78      	cmp	r7, #120	@ 0x78
 8005e1e:	4691      	mov	r9, r2
 8005e20:	4680      	mov	r8, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	469a      	mov	sl, r3
 8005e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e2a:	d807      	bhi.n	8005e3c <_printf_i+0x28>
 8005e2c:	2f62      	cmp	r7, #98	@ 0x62
 8005e2e:	d80a      	bhi.n	8005e46 <_printf_i+0x32>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	f000 80d2 	beq.w	8005fda <_printf_i+0x1c6>
 8005e36:	2f58      	cmp	r7, #88	@ 0x58
 8005e38:	f000 80b9 	beq.w	8005fae <_printf_i+0x19a>
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e44:	e03a      	b.n	8005ebc <_printf_i+0xa8>
 8005e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e4a:	2b15      	cmp	r3, #21
 8005e4c:	d8f6      	bhi.n	8005e3c <_printf_i+0x28>
 8005e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e54 <_printf_i+0x40>)
 8005e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005e3d 	.word	0x08005e3d
 8005e60:	08005e3d 	.word	0x08005e3d
 8005e64:	08005e3d 	.word	0x08005e3d
 8005e68:	08005e3d 	.word	0x08005e3d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e3d 	.word	0x08005e3d
 8005e74:	08005e3d 	.word	0x08005e3d
 8005e78:	08005e3d 	.word	0x08005e3d
 8005e7c:	08005e3d 	.word	0x08005e3d
 8005e80:	08005fc1 	.word	0x08005fc1
 8005e84:	08005eeb 	.word	0x08005eeb
 8005e88:	08005f7b 	.word	0x08005f7b
 8005e8c:	08005e3d 	.word	0x08005e3d
 8005e90:	08005e3d 	.word	0x08005e3d
 8005e94:	08005fe3 	.word	0x08005fe3
 8005e98:	08005e3d 	.word	0x08005e3d
 8005e9c:	08005eeb 	.word	0x08005eeb
 8005ea0:	08005e3d 	.word	0x08005e3d
 8005ea4:	08005e3d 	.word	0x08005e3d
 8005ea8:	08005f83 	.word	0x08005f83
 8005eac:	6833      	ldr	r3, [r6, #0]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6032      	str	r2, [r6, #0]
 8005eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e09d      	b.n	8005ffc <_printf_i+0x1e8>
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	1d19      	adds	r1, r3, #4
 8005ec6:	6031      	str	r1, [r6, #0]
 8005ec8:	0606      	lsls	r6, r0, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0xbc>
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <_printf_i+0xc4>
 8005ed0:	0645      	lsls	r5, r0, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0xb8>
 8005ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	da03      	bge.n	8005ee4 <_printf_i+0xd0>
 8005edc:	232d      	movs	r3, #45	@ 0x2d
 8005ede:	426d      	negs	r5, r5
 8005ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ee4:	4859      	ldr	r0, [pc, #356]	@ (800604c <_printf_i+0x238>)
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	e011      	b.n	8005f0e <_printf_i+0xfa>
 8005eea:	6821      	ldr	r1, [r4, #0]
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	0608      	lsls	r0, r1, #24
 8005ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ef4:	d402      	bmi.n	8005efc <_printf_i+0xe8>
 8005ef6:	0649      	lsls	r1, r1, #25
 8005ef8:	bf48      	it	mi
 8005efa:	b2ad      	uxthmi	r5, r5
 8005efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005efe:	4853      	ldr	r0, [pc, #332]	@ (800604c <_printf_i+0x238>)
 8005f00:	6033      	str	r3, [r6, #0]
 8005f02:	bf14      	ite	ne
 8005f04:	230a      	movne	r3, #10
 8005f06:	2308      	moveq	r3, #8
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f0e:	6866      	ldr	r6, [r4, #4]
 8005f10:	60a6      	str	r6, [r4, #8]
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	bfa2      	ittt	ge
 8005f16:	6821      	ldrge	r1, [r4, #0]
 8005f18:	f021 0104 	bicge.w	r1, r1, #4
 8005f1c:	6021      	strge	r1, [r4, #0]
 8005f1e:	b90d      	cbnz	r5, 8005f24 <_printf_i+0x110>
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	d04b      	beq.n	8005fbc <_printf_i+0x1a8>
 8005f24:	4616      	mov	r6, r2
 8005f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f2e:	5dc7      	ldrb	r7, [r0, r7]
 8005f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f34:	462f      	mov	r7, r5
 8005f36:	42bb      	cmp	r3, r7
 8005f38:	460d      	mov	r5, r1
 8005f3a:	d9f4      	bls.n	8005f26 <_printf_i+0x112>
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d10b      	bne.n	8005f58 <_printf_i+0x144>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	07df      	lsls	r7, r3, #31
 8005f44:	d508      	bpl.n	8005f58 <_printf_i+0x144>
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	6861      	ldr	r1, [r4, #4]
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	bfde      	ittt	le
 8005f4e:	2330      	movle	r3, #48	@ 0x30
 8005f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f58:	1b92      	subs	r2, r2, r6
 8005f5a:	6122      	str	r2, [r4, #16]
 8005f5c:	f8cd a000 	str.w	sl, [sp]
 8005f60:	464b      	mov	r3, r9
 8005f62:	aa03      	add	r2, sp, #12
 8005f64:	4621      	mov	r1, r4
 8005f66:	4640      	mov	r0, r8
 8005f68:	f7ff fee6 	bl	8005d38 <_printf_common>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d14a      	bne.n	8006006 <_printf_i+0x1f2>
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	b004      	add	sp, #16
 8005f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f043 0320 	orr.w	r3, r3, #32
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	4833      	ldr	r0, [pc, #204]	@ (8006050 <_printf_i+0x23c>)
 8005f84:	2778      	movs	r7, #120	@ 0x78
 8005f86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	6831      	ldr	r1, [r6, #0]
 8005f8e:	061f      	lsls	r7, r3, #24
 8005f90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f94:	d402      	bmi.n	8005f9c <_printf_i+0x188>
 8005f96:	065f      	lsls	r7, r3, #25
 8005f98:	bf48      	it	mi
 8005f9a:	b2ad      	uxthmi	r5, r5
 8005f9c:	6031      	str	r1, [r6, #0]
 8005f9e:	07d9      	lsls	r1, r3, #31
 8005fa0:	bf44      	itt	mi
 8005fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fa6:	6023      	strmi	r3, [r4, #0]
 8005fa8:	b11d      	cbz	r5, 8005fb2 <_printf_i+0x19e>
 8005faa:	2310      	movs	r3, #16
 8005fac:	e7ac      	b.n	8005f08 <_printf_i+0xf4>
 8005fae:	4827      	ldr	r0, [pc, #156]	@ (800604c <_printf_i+0x238>)
 8005fb0:	e7e9      	b.n	8005f86 <_printf_i+0x172>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f023 0320 	bic.w	r3, r3, #32
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	e7f6      	b.n	8005faa <_printf_i+0x196>
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	e7bd      	b.n	8005f3c <_printf_i+0x128>
 8005fc0:	6833      	ldr	r3, [r6, #0]
 8005fc2:	6825      	ldr	r5, [r4, #0]
 8005fc4:	6961      	ldr	r1, [r4, #20]
 8005fc6:	1d18      	adds	r0, r3, #4
 8005fc8:	6030      	str	r0, [r6, #0]
 8005fca:	062e      	lsls	r6, r5, #24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0x1c0>
 8005fd0:	6019      	str	r1, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <_printf_i+0x1c6>
 8005fd4:	0668      	lsls	r0, r5, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0x1bc>
 8005fd8:	8019      	strh	r1, [r3, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7bc      	b.n	8005f5c <_printf_i+0x148>
 8005fe2:	6833      	ldr	r3, [r6, #0]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	6032      	str	r2, [r6, #0]
 8005fe8:	681e      	ldr	r6, [r3, #0]
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f7fa f8ee 	bl	80001d0 <memchr>
 8005ff4:	b108      	cbz	r0, 8005ffa <_printf_i+0x1e6>
 8005ff6:	1b80      	subs	r0, r0, r6
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	2300      	movs	r3, #0
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006004:	e7aa      	b.n	8005f5c <_printf_i+0x148>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	4632      	mov	r2, r6
 800600a:	4649      	mov	r1, r9
 800600c:	4640      	mov	r0, r8
 800600e:	47d0      	blx	sl
 8006010:	3001      	adds	r0, #1
 8006012:	d0ad      	beq.n	8005f70 <_printf_i+0x15c>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d413      	bmi.n	8006042 <_printf_i+0x22e>
 800601a:	68e0      	ldr	r0, [r4, #12]
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	4298      	cmp	r0, r3
 8006020:	bfb8      	it	lt
 8006022:	4618      	movlt	r0, r3
 8006024:	e7a6      	b.n	8005f74 <_printf_i+0x160>
 8006026:	2301      	movs	r3, #1
 8006028:	4632      	mov	r2, r6
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	47d0      	blx	sl
 8006030:	3001      	adds	r0, #1
 8006032:	d09d      	beq.n	8005f70 <_printf_i+0x15c>
 8006034:	3501      	adds	r5, #1
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	9903      	ldr	r1, [sp, #12]
 800603a:	1a5b      	subs	r3, r3, r1
 800603c:	42ab      	cmp	r3, r5
 800603e:	dcf2      	bgt.n	8006026 <_printf_i+0x212>
 8006040:	e7eb      	b.n	800601a <_printf_i+0x206>
 8006042:	2500      	movs	r5, #0
 8006044:	f104 0619 	add.w	r6, r4, #25
 8006048:	e7f5      	b.n	8006036 <_printf_i+0x222>
 800604a:	bf00      	nop
 800604c:	080061bd 	.word	0x080061bd
 8006050:	080061ce 	.word	0x080061ce

08006054 <memmove>:
 8006054:	4288      	cmp	r0, r1
 8006056:	b510      	push	{r4, lr}
 8006058:	eb01 0402 	add.w	r4, r1, r2
 800605c:	d902      	bls.n	8006064 <memmove+0x10>
 800605e:	4284      	cmp	r4, r0
 8006060:	4623      	mov	r3, r4
 8006062:	d807      	bhi.n	8006074 <memmove+0x20>
 8006064:	1e43      	subs	r3, r0, #1
 8006066:	42a1      	cmp	r1, r4
 8006068:	d008      	beq.n	800607c <memmove+0x28>
 800606a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006072:	e7f8      	b.n	8006066 <memmove+0x12>
 8006074:	4402      	add	r2, r0
 8006076:	4601      	mov	r1, r0
 8006078:	428a      	cmp	r2, r1
 800607a:	d100      	bne.n	800607e <memmove+0x2a>
 800607c:	bd10      	pop	{r4, pc}
 800607e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006086:	e7f7      	b.n	8006078 <memmove+0x24>

08006088 <_sbrk_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	@ (80060a4 <_sbrk_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fb ff38 	bl	8001f08 <_sbrk>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_sbrk_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_sbrk_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200003c0 	.word	0x200003c0

080060a8 <memcpy>:
 80060a8:	440a      	add	r2, r1
 80060aa:	4291      	cmp	r1, r2
 80060ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80060b0:	d100      	bne.n	80060b4 <memcpy+0xc>
 80060b2:	4770      	bx	lr
 80060b4:	b510      	push	{r4, lr}
 80060b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060be:	4291      	cmp	r1, r2
 80060c0:	d1f9      	bne.n	80060b6 <memcpy+0xe>
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <_realloc_r>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4680      	mov	r8, r0
 80060ca:	4615      	mov	r5, r2
 80060cc:	460c      	mov	r4, r1
 80060ce:	b921      	cbnz	r1, 80060da <_realloc_r+0x16>
 80060d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	4611      	mov	r1, r2
 80060d6:	f7ff bc4b 	b.w	8005970 <_malloc_r>
 80060da:	b92a      	cbnz	r2, 80060e8 <_realloc_r+0x24>
 80060dc:	f7ff fbdc 	bl	8005898 <_free_r>
 80060e0:	2400      	movs	r4, #0
 80060e2:	4620      	mov	r0, r4
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	f000 f81a 	bl	8006120 <_malloc_usable_size_r>
 80060ec:	4285      	cmp	r5, r0
 80060ee:	4606      	mov	r6, r0
 80060f0:	d802      	bhi.n	80060f8 <_realloc_r+0x34>
 80060f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060f6:	d8f4      	bhi.n	80060e2 <_realloc_r+0x1e>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7ff fc38 	bl	8005970 <_malloc_r>
 8006100:	4607      	mov	r7, r0
 8006102:	2800      	cmp	r0, #0
 8006104:	d0ec      	beq.n	80060e0 <_realloc_r+0x1c>
 8006106:	42b5      	cmp	r5, r6
 8006108:	462a      	mov	r2, r5
 800610a:	4621      	mov	r1, r4
 800610c:	bf28      	it	cs
 800610e:	4632      	movcs	r2, r6
 8006110:	f7ff ffca 	bl	80060a8 <memcpy>
 8006114:	4621      	mov	r1, r4
 8006116:	4640      	mov	r0, r8
 8006118:	f7ff fbbe 	bl	8005898 <_free_r>
 800611c:	463c      	mov	r4, r7
 800611e:	e7e0      	b.n	80060e2 <_realloc_r+0x1e>

08006120 <_malloc_usable_size_r>:
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f18      	subs	r0, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfbc      	itt	lt
 800612a:	580b      	ldrlt	r3, [r1, r0]
 800612c:	18c0      	addlt	r0, r0, r3
 800612e:	4770      	bx	lr

08006130 <_init>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr

0800613c <_fini>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	bf00      	nop
 8006140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006142:	bc08      	pop	{r3}
 8006144:	469e      	mov	lr, r3
 8006146:	4770      	bx	lr
